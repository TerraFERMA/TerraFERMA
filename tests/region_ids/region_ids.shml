<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A test that region ids are working correctly.</string_value>
  </description>
  <simulations>
    <simulation name="RegionIDs">
      <input_file>
        <string_value lines="1" type="filename">region_ids.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="nprocs">
          <values>
            <string_value lines="1">1 2 3</string_value>
          </values>
          <process_scale>
            <integer_value shape="3" rank="1">1 2 3</integer_value>
          </process_scale>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="GMsh">
          <input_file>
            <string_value lines="1" type="filename">region_id.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value lines="20" type="code" language="python">meshfiles = ["region_id"+ext for ext in [".xml"]]</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 region_id.geo -o region_id.msh</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">dolfin-convert region_id.msh region_id.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="field_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("region_ids.stat")

field_min = stat["Regions"]["Field"]["min"]</string_value>
        </variable>
        <variable name="field_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("region_ids.stat")

field_max = stat["Regions"]["Field"]["max"]</string_value>
        </variable>
        <variable name="coeff_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("region_ids.stat")

coeff_max = stat["Regions"]["Coefficient"]["max"]</string_value>
        </variable>
        <variable name="coeff_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("region_ids.stat")

coeff_min = stat["Regions"]["Coefficient"]["min"]</string_value>
        </variable>
        <variable name="field_lower">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

field_lower = det["Regions"]["Field"]["Lower"]</string_value>
        </variable>
        <variable name="field_lowermiddle">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

field_lowermiddle = det["Regions"]["Field"]["LowerMiddle"]</string_value>
        </variable>
        <variable name="field_uppermiddle">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

field_uppermiddle = det["Regions"]["Field"]["UpperMiddle"]</string_value>
        </variable>
        <variable name="field_upper">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

field_upper = det["Regions"]["Field"]["Upper"]</string_value>
        </variable>
        <variable name="coeff_lower">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

coeff_lower = det["Regions"]["Coefficient"]["Lower"]</string_value>
        </variable>
        <variable name="coeff_lowermiddle">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

coeff_lowermiddle = det["Regions"]["Coefficient"]["LowerMiddle"]</string_value>
        </variable>
        <variable name="coeff_uppermiddle">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

coeff_uppermiddle = det["Regions"]["Coefficient"]["UpperMiddle"]</string_value>
        </variable>
        <variable name="coeff_upper">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

det = parser("region_ids.det")

coeff_upper = det["Regions"]["Coefficient"]["Upper"]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="field_min">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(field_min)-32.)/32. &lt; 1.e-12)</string_value>
    </test>
    <test name="field_max">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(field_max)-35.0)/35. &lt; 1.e-12)</string_value>
    </test>
    <test name="coeff_min">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(coeff_min)-32.0)/32. &lt; 1.e-12)</string_value>
    </test>
    <test name="coeff_max">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(coeff_max)-35.0)/35. &lt; 1.e-12)</string_value>
    </test>
    <test name="field_lower">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(field_lower)-35.0)/35.&lt;1.e-12)</string_value>
    </test>
    <test name="field_lowermiddle">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(field_lowermiddle)-34.0)/34. &lt; 1.e-12)</string_value>
    </test>
    <test name="field_uppermiddle">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(field_uppermiddle)-33.0)/33. &lt; 1.e-12)</string_value>
    </test>
    <test name="field_upper">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(field_upper)-32.0)/32. &lt; 1.e-12)</string_value>
    </test>
    <test name="coeff_lower">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(coeff_lower)-35.0)/35. &lt; 1.e-12)</string_value>
    </test>
    <test name="coeff_lowermiddle">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(coeff_lowermiddle)-34.0)/34. &lt; 1.e-12)</string_value>
    </test>
    <test name="coeff_uppermiddle">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(coeff_uppermiddle)-33.0)/33. &lt; 1.e-12)</string_value>
    </test>
    <test name="coeff_upper">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(numpy.array(coeff_upper)-32.0)/32. &lt; 1.e-12)</string_value>
    </test>
  </tests>
</harness_options>
