<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">32 32</integer_value>
        </number_cells>
        <diagonal>
          <string_value lines="1">left</string_value>
        </diagonal>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">rigidrotation</string_value>
    </output_base_name>
    <visualization>
      <element name="P2DG">
        <family>
          <string_value lines="1">DG</string_value>
        </family>
        <degree>
          <integer_value rank="0">2</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods>
      <visualization_period>
        <real_value rank="0">0.25</real_value>
      </visualization_period>
      <statistics_period>
        <real_value rank="0">0.25</real_value>
      </statistics_period>
    </dump_periods>
    <detectors/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.</real_value>
    </current_time>
    <finish_time>
      <real_value rank="0">2.</real_value>
    </finish_time>
    <timestep>
      <coefficient name="Timestep">
        <ufl_symbol name="global">
          <string_value lines="1">dt</string_value>
        </ufl_symbol>
        <type name="Constant">
          <rank name="Scalar" rank="0">
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">.01</real_value>
                <comment>cfl ~ 2. for h = 1/64, v_max = 0.5*2*pi</comment>
              </constant>
            </value>
          </rank>
        </type>
      </coefficient>
    </timestep>
  </timestepping>
  <global_parameters/>
  <system name="Advection">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">u</string_value>
    </ufl_symbol>
    <field name="phi">
      <ufl_symbol name="global">
        <string_value lines="1">phi</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">from math import exp
from numpy import array

def phi0(x,x0):
  global exp,array
  A=2.
  sigma = .1
  r2 = sum((x-x0)*(x-x0))
  return A*exp(-r2/sigma/sigma)   

def val(x):
  global phi0
  x0 = array([.5, .7])
  return phi0(x,x0)</string_value>
            </python>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <coefficient name="phistar">
      <ufl_symbol name="global">
        <string_value lines="1">phistar</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="Quadrature">
            <family>
              <string_value lines="1">Quadrature</string_value>
            </family>
            <degree>
              <integer_value rank="0">4</integer_value>
            </degree>
            <quadrature_rule name="canonical"/>
          </element>
          <value type="value" name="WholeMesh">
            <internal rank="0">
              <algorithm name="SemiLagrangian">
                <lookup_function>
                  <field name="phi"/>
                </lookup_function>
                <velocity>
                  <coefficient name="Velocity"/>
                </velocity>
                <outside_value>
                  <coefficient name="outside"/>
                </outside_value>
              </algorithm>
            </internal>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="Velocity">
      <ufl_symbol name="global">
        <string_value lines="1">V</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Vector" rank="1">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="1">
              <string_value lines="20" type="code" language="python">from math import pi
omega = 2.*pi

def val(x):
  global omega
  u = (x[1] - 0.5)*omega
  w = -(x[0] - 0.5)*omega
  return [u,w]</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="outside">
      <ufl_symbol name="global">
        <string_value lines="1">out</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">0.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="phitrue">
      <ufl_symbol name="global">
        <string_value lines="1">phitrue</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">from math import sin,cos,pi,sqrt
from numpy import array
x_rot = array([0.5,0.5])
x0_init = array([0.5,0.7])

def val(x,t):
  global sin,cos,pi,sqrt,x_rot,x0_init,phi0,array
  # calculate rotation
  theta = 2.*pi*t
  ct = cos(theta)
  st = sin(theta)
  # find position of rotated initial x0
  xr = x0_init - x_rot
  r = sqrt(sum(xr*xr))
  x0 = x_rot + r*array([st,ct])
  # return initial condition at takeoff point
  return phi0(x,x0)</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="project">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">F = phi_t*(phi_i - phistar_n)*dx</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">F</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">J = derivative(F,u_i,u_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <quadrature_degree>
          <integer_value rank="0">4</integer_value>
        </quadrature_degree>
        <quadrature_rule name="canonical"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-12</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">10</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="cg">
            <relative_error>
              <real_value rank="0">1.e-6</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">10</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="sor"/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <functional name="phiIntPhi">
      <string_value lines="20" type="code" language="python">int = phi*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="ErrorL2NormSquared">
      <string_value lines="20" type="code" language="python">err2 = (phi - phitrue)**2*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">err2</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
  </system>
</terraferma_options>
