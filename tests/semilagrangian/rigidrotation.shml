<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">rigid rotation advection test using semi-lagrangian algorithm with an analytic velocity field</string_value>
  </description>
  <simulations>
    <simulation name="rigidrotation">
      <input_file>
        <string_value type="filename" lines="1">rigidrotation.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">32</string_value>
          </values>
        </parameter>
        <parameter name="dt">
          <values>
            <string_value lines="1">.01 .02</string_value>
          </values>
          <update>
            <string_value type="code" lines="20" language="python">import libspud
# set number of cells on mesh
libspud.set_option("/geometry/mesh::Mesh/source::UnitSquare/number_cells",[ int(ncells), int(ncells)])

# set the time step
libspud.set_option("/timestepping/timestep/coefficient::Timestep/type::Constant/rank::Scalar/value::WholeMesh/constant",float(dt))</string_value>
            <single_build/>
          </update>
          <comment>time step...t= 1 is one rotation</comment>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="IntPhi">
          <string_value type="code" lines="20" language="python">from buckettools.statfile import parser
stat = parser("rigidrotation.stat")
IntPhi = stat["Advection"]["phiIntPhi"]["functional_value"]
</string_value>
          <comment>relative change in the integral of porosity over the domain
</comment>
        </variable>
        <variable name="L2Error">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from numpy import sqrt
stat = parser("rigidrotation.stat")
L2Error = sqrt(stat["Advection"]["ErrorL2NormSquared"]["functional_value"])</string_value>
        </variable>
        <variable name="Time">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rigidrotation.stat")
Time = stat["ElapsedTime"]["value"]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="DeltaPhiRelative">
      <string_value type="code" lines="20" language="python">import numpy as np
deltaphi=[]
for ncells in IntPhi.parameters['ncells']:
  print "ncells =",ncells
  for dt in IntPhi.parameters['dt']:
    slice = {'ncells':ncells, 'dt':dt}
    iphi = IntPhi[slice]
    deltaphi.append((iphi[-1] - iphi[0])/iphi[0])
    print "dt =",dt," dPhi/Phi = ",deltaphi[-1]

assert(np.all(np.array(deltaphi) &lt; 0.01))

</string_value>
      <comment>calculates relative change in  the integral of phi from begining to end</comment>
    </test>
    <test name="L2ErrorRelative">
      <string_value lines="20" type="code" language="python">import numpy as np
deltaerr=[]
for ncells in IntPhi.parameters['ncells']:
  print "ncells =",ncells
  for dt in IntPhi.parameters['dt']:
    slice = {'ncells':ncells, 'dt':dt}
    err = L2Error[slice]
    iphi = IntPhi[slice]
    deltaerr.append(err[-1]/iphi[0])
    print "dt =",dt, " L2Error = ", err[-1], " L2Error_rel = ",deltaerr[-1]

assert(np.all(np.array(deltaerr) &lt; 0.15))</string_value>
      <comment>calculates ratio of L2Error between true and approximate solution, normalized by the total porosity</comment>
    </test>
  </tests>
</harness_options>
