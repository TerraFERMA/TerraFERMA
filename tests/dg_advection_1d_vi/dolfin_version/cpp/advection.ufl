f_e = FiniteElement("DG", interval, 1)

v = VectorConstant(interval)
dt = Constant(interval)
dtr = dt('+')
fin = Constant(interval)
theta = Constant(interval)
thetar = theta('+')

f_i = Coefficient(f_e)
f_n = Coefficient(f_e)

f_t = TestFunction(f_e)
f_a = TrialFunction(f_e)

n = f_e.cell().n
vin = (dot(v, n) + abs(dot(v, n)))/2.0
vout = (dot(v, n) - abs(dot(v, n)))/2.0
vn = dot(v,n)

r_m = f_t*f_a*dx(1) + f_t*f_a*dx(2) - f_t*f_n*dx(1) - f_t*f_n*dx(2)

r_a = - dt*theta*dot(grad(f_t), v*f_a)*dx(1) - dt*theta*dot(grad(f_t), v*f_a)*dx(2) \
      - dt*(1.0-theta)*dot(grad(f_t), v*f_n)*dx(1) - dt*(1.0-theta)*dot(grad(f_t), v*f_n)*dx(2)

#r_m = f_t*f_a*dx - f_t*f_n*dx
#
#r_a = - dt*theta*dot(grad(f_t), v*f_a)*dx - dt*(1.0-theta)*dot(grad(f_t), v*f_n)*dx

r_fS =  dtr*thetar*(dot(vin('+')*f_a('+') - vin('-')*f_a('-'), jump(f_t))*dS) + \
        dtr*(1.0-thetar)*(dot(vin('+')*f_n('+') - vin('-')*f_n('-'), jump(f_t))*dS)

r_fs1 =  dt*dot(vn*f_t, fin)*ds(1)
r_fs2 =  dt*theta*dot(vn*f_t, f_a)*ds(2) + dt*(1.0-theta)*dot(vn*f_t, f_n)*ds(2)
r_fs = r_fs1 + r_fs2

#r_fs =  dt*dot(vout*f_t, fin)*ds + dt*theta*dot(vin*f_t, f_a)*ds + dt*(1.0-theta)*dot(vin*f_t, f_n)*ds

r = r_m + r_a + r_fS + r_fs

a = lhs(r) 
L = rhs(r)

