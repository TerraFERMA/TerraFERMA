<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">Test adaptive timestepping based on an expression based Courant number.</string_value>
  </description>
  <simulations>
    <simulation name="AdaptDT">
      <input_file>
        <string_value lines="1" type="filename">adaptdt.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <variables>
        <variable name="mincourant">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("adaptdt.stat")

mincourant = stat["CourantNumber"]["AltCourantNumber"]["min"][1:].min()</string_value>
        </variable>
        <variable name="maxcourant">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("adaptdt.stat")

maxcourant = stat["CourantNumber"]["AltCourantNumber"]["max"][1:].max()</string_value>
        </variable>
        <variable name="dt">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("adaptdt.stat")

dt = stat["dt"]["value"]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="mincourant">
      <string_value lines="20" type="code" language="python">assert mincourant==10.</string_value>
    </test>
    <test name="maxcourant">
      <string_value lines="20" type="code" language="python">assert maxcourant==15.</string_value>
    </test>
    <test name="dt">
      <string_value lines="20" type="code" language="python">import numpy
expectedval = numpy.array([ 1.    ,  1.    ,  1.    , \
                            1.1   ,  1.1   ,  \
                            1.21  ,  1.21  ,  \
                            1.331 ,  1.331 ,  \
                            1.4641,  1.4641,  \
                            1.5   ,  1.5   ,  1.5   ,    1.5   ,  1.5   ,  1.5   ])

assert numpy.all(abs(dt-expectedval) &lt; 1.e-14)</string_value>
    </test>
  </tests>
</harness_options>
