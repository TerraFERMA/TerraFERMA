<?xml version='1.0' encoding='UTF-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitInterval">
        <number_cells>
          <integer_value rank="0">10</integer_value>
        </number_cells>
        <cell>
          <string_value>interval</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">adaptdt</string_value>
    </output_base_name>
    <visualization>
      <element name="P1">
        <family>
          <string_value>CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">1</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods/>
    <detectors/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <finish_time>
      <real_value rank="0">20.0</real_value>
    </finish_time>
    <timestep>
      <coefficient name="Timestep">
        <ufl_symbol name="global">
          <string_value lines="1">dt</string_value>
        </ufl_symbol>
        <type name="Constant">
          <rank name="Scalar" rank="0">
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">1.0</real_value>
              </constant>
            </value>
          </rank>
        </type>
      </coefficient>
      <adaptive>
        <constraint name="Courant">
          <system name="CourantNumber"/>
          <coefficient name="AltCourantNumber"/>
          <requested_maximum_value>
            <real_value rank="0">15.0</real_value>
          </requested_maximum_value>
        </constraint>
        <adapt_period_in_timesteps>
          <integer_value rank="0">2</integer_value>
        </adapt_period_in_timesteps>
        <increase_tolerance>
          <real_value rank="0">1.1</real_value>
        </increase_tolerance>
      </adaptive>
    </timestep>
  </timestepping>
  <global_parameters/>
  <system name="CourantNumber">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">uc</string_value>
    </ufl_symbol>
    <coefficient name="Velocity">
      <ufl_symbol name="global">
        <string_value lines="1">v</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">-1.0</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics/>
      </diagnostics>
    </coefficient>
    <coefficient name="AltCourantNumber">
      <ufl_symbol name="global">
        <string_value lines="1">ac</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P0">
            <family>
              <string_value>DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr v;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">v = system()-&gt;fetch_coeff("Velocity")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">const dolfin::Cell dcell((*system()-&gt;mesh()), cell.index);
dolfin::Array&lt;double&gt; v_values(1);
v-&gt;eval(v_values, x, cell);
double valmin = std::abs(*std::min_element(&amp;v_values.data()[0], &amp;v_values.data()[v_values.size()]));
double valmax = std::abs(*std::max_element(&amp;v_values.data()[0], &amp;v_values.data()[v_values.size()]));
double val = std::max(valmin, valmax);
values[0] = (val*bucket()-&gt;timestep())/dcell.diameter();</string_value>
              </eval>
            </cpp>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics/>
      </diagnostics>
    </coefficient>
    </system>
</terraferma_options>
