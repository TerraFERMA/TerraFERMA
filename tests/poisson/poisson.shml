<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>cwilson</owner>
  <description>A very simple simulation of Poisson.  Testing nothing.</description>
  <simulations>
    <simulation name="Poisson">
      <input_file>
        <string_value lines="1" type="filename">poisson.tfml</string_value>
      </input_file>
      <parameter_sweep>
        <parameter name="nprocs">
          <values>1 2 3</values>
          <process_scale>
            <integer_value shape="3" rank="1">1 2 3</integer_value>
          </process_scale>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="pd">
          <string_value type="code" lines="20" language="python">from buckettools.statfile import parser
det = parser("poisson.det")
pd = det["SNESPoisson"]["Field"]["Point"][0][-1]</string_value>
        </variable>
        <variable name="fmax">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("poisson.stat")
fmax = stat["SNESPoisson"]["Field"]["max"][-1]</string_value>
        </variable>
        <variable name="fmin">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("poisson.stat")
fmin = stat["SNESPoisson"]["Field"]["min"][-1]</string_value>
        </variable>
        <variable name="fint">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("poisson.stat")
fint = stat["SNESPoisson"]["Field"]["Integral"][-1]</string_value>
        </variable>
        <variable name="nlogs">
          <string_value type="code" lines="20" language="python">import glob
nlogs = len(glob.glob("terraferma.log-?"))</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="pd">
      <string_value type="code" lines="20" language="python">from numpy import array
value = 0.2506401528982718
print "pd = ", value
assert(all(abs(array(pd)-value)/value &lt; 1.e-2))</string_value>
      <comment>simple regression test</comment>
    </test>
    <test name="fmax">
      <string_value lines="20" type="code" language="python">from numpy import array
value = 0.30342014551000002
print "fmax = ", value 
assert(all(abs(array(fmax)-value)/value &lt; 1.e-2))</string_value>
      <comment>simple regression test</comment>
    </test>
    <test name="fmin">
      <string_value lines="20" type="code" language="python">from numpy import array
value = -0.061845422735000002
print "fmin = ", value
assert(all(abs(array(fmax)-value)/value &lt; 1.e-2))</string_value>
      <comment>simple regression test</comment>
    </test>
    <test name="fint">
      <string_value lines="20" type="code" language="python">from numpy import array
value = 0.12498977447
print "fint = ", value
assert(all(abs(array(fint)-value)/value &lt; 1.e-2))</string_value>
      <comment>simple regression test</comment>
    </test>
    <test name="nlogs">
      <string_value type="code" lines="20" language="python">assert(all([nlogs[i]==int(nlogs.parameters.values()[0][i]) for i in xrange(len(nlogs))]))</string_value>
    </test>
  </tests>
</harness_options>
