<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">test to check tfsolitarywave python library for initializing and checking errors on solitary waves of arbitrary dimension and meshes</string_value>
  </description>
  <simulations>
    <simulation name="2dsquare">
      <input_file>
        <string_value lines="1" type="filename">magmawaves_2dsquare.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <variables>
        <variable name="phi_integral_2dsquare">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("magmawaves.stat")
phi_integral_2dsquare= stat["magma"]["PorosityIntegral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="pressure_integral_2dsquare">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("magmawaves.stat")
pressure_integral_2dsquare= stat["magma"]["PressureIntegral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="rel_error_2dsquare">
          <string_value lines="20" type="code" language="python">from pysolwave.tfsolitarywave import TFSolitaryWave
from glob import glob
import os.path
import pickle

input = glob("../*2dsquare.tfml")[0]
tf = TFSolitaryWave(input)

checkpoints = glob("*_checkpoint*.tfml")
nfiles = len(checkpoints)
firstfileend = checkpoints[0].split('_')[-1]
lastfile = checkpoints[0].replace(firstfileend,"{0}.tfml".format(nfiles-1))
print lastfile

lastfile_errors = lastfile.replace(".tfml","_errors.pkl")

if os.path.isfile(lastfile_errors):
  last_errors = pickle.load( open(lastfile_errors,"rb"))
else:
  last_errors = tf.geterrors(lastfile)
  pickle.dump(last_errors, open(lastfile_errors,"wb"))
  
rel_error_2dsquare = last_errors[4]</string_value>
        </variable>
      </variables>
    </simulation>
    <simulation name="2drectangle">
      <input_file>
        <string_value lines="1" type="filename">magmawaves_2drectangle.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <variables>
        <variable name="phi_integral_2drectangle">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("magmawaves.stat")
phi_integral_2drectangle= stat["magma"]["PorosityIntegral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="pressure_integral_2drectangle">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("magmawaves.stat")
pressure_integral_2drectangle= stat["magma"]["PressureIntegral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="rel_error_2drectangle">
          <string_value lines="20" type="code" language="python">from pysolwave.tfsolitarywave import TFSolitaryWave
from glob import glob
import os.path
import pickle

input = glob("../*2drectangle.tfml")[0]
tf = TFSolitaryWave(input)

checkpoints = glob("*_checkpoint*.tfml")
nfiles = len(checkpoints)
firstfileend = checkpoints[0].split('_')[-1]
lastfile = checkpoints[0].replace(firstfileend,"{0}.tfml".format(nfiles-1))
print lastfile

lastfile_errors = lastfile.replace(".tfml","_errors.pkl")

if os.path.isfile(lastfile_errors):
  last_errors = pickle.load( open(lastfile_errors,"rb"))
else:
  last_errors = tf.geterrors(lastfile)
  pickle.dump(last_errors, open(lastfile_errors,"wb"))
  
rel_error_2drectangle = last_errors[4]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="2dsquare">
      <string_value lines="20" type="code" language="python">import numpy as np
phi_integral= 1.0378219555
pressure_integral = 0.
rel_wave_error = 2.77215803e-04

test_values = np.array([ phi_integral, pressure_integral, rel_wave_error])
values = np.array([ phi_integral_2dsquare, pressure_integral_2dsquare, rel_error_2dsquare])
rel_errors = abs(values - test_values)
index = [0,2]
rel_errors[index] = rel_errors[index]/values[index] 
print 'test=',test_values
print 'model=',values
print 'rel_errors=',rel_errors
assert (any(rel_errors) &gt; 1.e-5)</string_value>
    </test>
    <test name="2drectangle">
      <string_value lines="20" type="code" language="python">import numpy as np
phi_integral= 1.0378219555
pressure_integral = 0.
rel_wave_error = 2.77215803e-04

test_values = np.array([ phi_integral, pressure_integral, rel_wave_error])
values = np.array([ phi_integral_2drectangle, pressure_integral_2drectangle, rel_error_2drectangle])
rel_errors = abs(values - test_values)
index = [0,2]
rel_errors[index] = rel_errors[index]/values[index] 
print 'test=',test_values
print 'model=',values
print 'rel_errors=',rel_errors
assert (any(rel_errors) &gt; 1.e-5)</string_value>
    </test>
  </tests>
</harness_options>
