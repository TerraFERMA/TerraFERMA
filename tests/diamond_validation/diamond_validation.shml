<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">Tests that all the test files are still valid.</string_value>
  </description>
  <tests>
    <test name="Validate">
      <string_value lines="20" type="code" language="python">import sys
import glob
import os
import string
import xml.dom.minidom
import xml.parsers.expat

import diamond.debug as debug
import diamond.schema as schema

debug.SetDebugLevel(0)

import diamond.config as config # import after debug level set

import subprocess
command = ["git", "rev-parse", "--show-toplevel"]
p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
retcode = p.wait()
if retcode==0:
  dirname = p.stdout.read().split("\n")[0]
else:
  dirname = os.getcwd()
  if not os.path.exists(os.path.join(dirname, "diamond_validation.shml")):
    print "diamond_validation: ERROR: don't know path to tests.  Please improve my logic!"
    assert False
  dirname = os.path.join(dirname, os.path.pardir)
  
ignoredOptionsFiles = []

class DiamondValidator:
  def __init__(self, rootDir):
    self._rootDir = rootDir
    self.Reset()

    return

  def Reset(self):
    self._passes = 0
    self._optionErrors = {}

    return

  def ValidateOptionsFiles(self, testDir, depth=-1, schemafile=None, extensions = None, alias=None):
    extdict = {}
    if schemafile is None:
      if extensions is None:
        debug.deprint("Need either extensions or schemafile to be set.", 0)
        sys.exit(1)
      for extension in extensions:
        if extension not in config.schemata:
          debug.deprint("Could not find schemafile from schemata for extension %s."%(extension), 0)
          sys.exit(1)
        extdict[extension] = config.schemata[extension][1][alias]
    
    schemadict = {}
    for k,v in extdict.iteritems():
      schemadict[k] = schema.Schema(v)

    if extension is not None:
      for extension in extensions:
        debug.dprint("***Testing files with extension ." + extension + " in directory " + testDir, 0)
        sch = schemadict[extension]
        for filename in self._TestFiles(extension, testDir, depth=depth):
          optionsTree = sch.read(filename)
          lost_eles, added_eles, lost_attrs, added_attrs = sch.read_errors()
          if len(lost_eles) + len(added_eles) + len(lost_attrs) + len(added_attrs) == 0 and optionsTree.valid:
            debug.dprint(os.path.relpath(filename, self._rootDir) + " : Pass", 0)
            self._passes += 1
          else:
            debug.dprint(os.path.relpath(filename, self._rootDir) + " : Fail", 0)
            self._optionErrors[filename] = (lost_eles, added_eles, lost_attrs, added_attrs)

    return

  def _TestFiles(self, extension, testDir, depth=-1):
    filenames = []
    baseDir = os.path.join(self._rootDir, testDir)
    for dirname, dirnames, files in os.walk(baseDir, topdown=True):
      current_depth = string.count(dirname, os.path.sep) - string.count(baseDir, os.path.sep)
      filenames += glob.glob(os.path.join(dirname, "*." + extension))
      dirnames[:] = filter(lambda dir: not (dir.endswith('.build') or dir.endswith('.run')), dirnames)
      if current_depth == depth: dirnames[:] = []

    return filenames

  def Passes(self):
    return self._passes

  def OptionErrors(self):
    return self._optionErrors

test_validator = DiamondValidator(rootDir = dirname)

test_validator.ValidateOptionsFiles(testDir = "tests", extensions = ["tfml", "shml"])

passes = test_validator.Passes()
optionErrors = test_validator.OptionErrors()

tutorial_validator = DiamondValidator(rootDir = dirname)

tutorial_validator.ValidateOptionsFiles(testDir = "tutorials", extensions = ["tfml", "shml"])

passes += tutorial_validator.Passes()
optionErrors.update(tutorial_validator.OptionErrors())

failures = []
for filename in optionErrors.keys():
  if not filename in ignoredOptionsFiles:
    failures.append(filename)

if len(failures)&gt;0:
  print "*****Summary of options files with failures:"
  for filename in failures:
    print filename
  print "*****\n"

print "diamond_validation: validation passes: " + str(passes)
print "diamond_validation: validation failures: " + str(len(failures))

assert len(failures) == 0</string_value>
    </test>
  </tests>
</harness_options>
