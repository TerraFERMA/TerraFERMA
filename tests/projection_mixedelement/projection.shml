<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>cwilson</owner>
  <description>Projection using a mixed element.</description>
  <simulations>
    <simulation name="Projection">
      <input_file>
        <string_value lines="1" type="filename">projection.tfml</string_value>
      </input_file>
      <required_input>
        <filenames name="Mesh">
          <string>
            <string_value lines="1" type="filename">mesh/square.xml</string_value>
          </string>
        </filenames>
      </required_input>
      <required_output>
        <filenames name="Stat">
          <string>
            <string_value lines="1" type="filename">projection.stat</string_value>
          </string>
        </filenames>
      </required_output>
      <variables>
        <variable name="timestep_count">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

timestep_count = stat["timestep"]["value"][-1]</string_value>
        </variable>
        <variable name="picard_field1_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field1_min = stat["PicardProjection"]["Field1"]["min"][-1]</string_value>
        </variable>
        <variable name="picard_field1_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field1_max = stat["PicardProjection"]["Field1"]["max"][-1]</string_value>
        </variable>
        <variable name="picard_field1_int">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field1_int = stat["PicardProjection"]["Field1"]["Integral"][-1]</string_value>
        </variable>
        <variable name="picard_source1_int">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_source1_int = stat["PicardProjection"]["Source1"]["Integral"][-1]</string_value>
        </variable>
        <variable name="picard_field2_min_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_min_0 = stat["PicardProjection"]["Field2"]["max"][0][-1]</string_value>
        </variable>
        <variable name="picard_field2_max_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_max_0 = stat["PicardProjection"]["Field2"]["min"][0][-1]</string_value>
        </variable>
        <variable name="picard_field2_int_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_int_0 = stat["PicardProjection"]["Field2"]["Integral0"][-1]</string_value>
        </variable>
        <variable name="picard_source2_int_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_source2_int_0 = stat["PicardProjection"]["Source2"]["Integral0"][-1]</string_value>
        </variable>
        <variable name="picard_field2_min_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_min_1 = stat["PicardProjection"]["Field2"]["max"][1][-1]</string_value>
        </variable>
        <variable name="picard_field2_max_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_max_1 = stat["PicardProjection"]["Field2"]["min"][1][-1]</string_value>
        </variable>
        <variable name="picard_field2_int_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_int_1 = stat["PicardProjection"]["Field2"]["Integral1"][-1]</string_value>
        </variable>
        <variable name="picard_source2_int_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_source2_int_1 = stat["PicardProjection"]["Source2"]["Integral1"][-1]</string_value>
        </variable>
        <variable name="picard_dummy_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_dummy_max = stat["PicardProjection"]["Dummy"]["max"]</string_value>
        </variable>
        <variable name="picard_dummy_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_dummy_min = stat["PicardProjection"]["Dummy"]["min"]</string_value>
        </variable>
        <variable name="snes_field1_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field1_min = stat["SNESProjection"]["Field1"]["min"][-1]</string_value>
        </variable>
        <variable name="snes_field1_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field1_max = stat["SNESProjection"]["Field1"]["max"][-1]</string_value>
        </variable>
        <variable name="snes_field1_int">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field1_int = stat["SNESProjection"]["Field1"]["Integral"][-1]</string_value>
        </variable>
        <variable name="snes_source1_int">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source1_int = stat["SNESProjection"]["Source1"]["Integral"][-1]</string_value>
        </variable>
        <variable name="snes_field2_min_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_min_0 = stat["SNESProjection"]["Field2"]["max"][0][-1]</string_value>
        </variable>
        <variable name="snes_field2_max_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_max_0 = stat["SNESProjection"]["Field2"]["min"][0][-1]</string_value>
        </variable>
        <variable name="snes_field2_int_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_int_0 = stat["SNESProjection"]["Field2"]["Integral0"][-1]</string_value>
        </variable>
        <variable name="snes_source2_int_0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source2_int_0 = stat["SNESProjection"]["Source2"]["Integral0"][-1]</string_value>
        </variable>
        <variable name="snes_field2_min_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_min_1 = stat["SNESProjection"]["Field2"]["max"][1][-1]</string_value>
        </variable>
        <variable name="snes_field2_max_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_max_1 = stat["SNESProjection"]["Field2"]["min"][1][-1]</string_value>
        </variable>
        <variable name="snes_field2_int_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_int_1 = stat["SNESProjection"]["Field2"]["Integral1"][-1]</string_value>
        </variable>
        <variable name="snes_source2_int_1">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source2_int_1 = stat["SNESProjection"]["Source2"]["Integral1"][-1]</string_value>
        </variable>
        <variable name="snes_dummy_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_dummy_max = stat["SNESProjection"]["Dummy"]["max"]</string_value>
        </variable>
        <variable name="snes_dummy_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_dummy_min = stat["SNESProjection"]["Dummy"]["min"]</string_value>
        </variable>
        <variable name="picard_field1_vtu">
          <string_value type="code" lines="20" language="python">vtu = vtktools.vtu("projection000010.vtu")
picard_field1_vtu = vtu.GetField("PicardProjection::Field1")</string_value>
        </variable>
        <variable name="snes_resfield2_vtu_1">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_resfield2_vtu_1 = vtu.GetField("SNESProjection::ResidualField2")[:,1]</string_value>
        </variable>
        <variable name="snes_field1_vtu_1">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_field1_vtu_1 = vtu.GetField("SNESProjection::Field1")</string_value>
        </variable>
        <variable name="snes_dummy_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_dummy_vtu = vtu.GetField("SNESProjection::Dummy")</string_value>
        </variable>
        <variable name="picard_field1_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_field1_vtu = vtu.GetField("PicardProjection::Field1")</string_value>
        </variable>
        <variable name="snes_resfield2_vtu_0">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_resfield2_vtu_0 = vtu.GetField("SNESProjection::ResidualField2")[:,0]</string_value>
        </variable>
        <variable name="picard_source2_vtu_0">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_source2_vtu_0 = vtu.GetField("PicardProjection::Source2")[:,0]</string_value>
        </variable>
        <variable name="picard_source2_vtu_1">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_source2_vtu_1 = vtu.GetField("PicardProjection::Source2")[:,1]</string_value>
        </variable>
        <variable name="locations_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
locations_vtu = vtu.GetLocations()</string_value>
        </variable>
        <variable name="picard_resfield1_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_resfield1_vtu = vtu.GetField("PicardProjection::ResidualField1")</string_value>
        </variable>
        <variable name="picard_resfield2_vtu_1">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_resfield2_vtu_1 = vtu.GetField("PicardProjection::ResidualField2")[:,1]</string_value>
        </variable>
        <variable name="picard_resfield2_vtu_0">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_resfield2_vtu_0 = vtu.GetField("PicardProjection::ResidualField2")[:,0]</string_value>
        </variable>
        <variable name="picard_field2_vtu_0">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_field2_vtu_0 = vtu.GetField("PicardProjection::Field2")[:,0]</string_value>
        </variable>
        <variable name="picard_field2_vtu_1">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_field2_vtu_1 = vtu.GetField("PicardProjection::Field2")[:,1]</string_value>
        </variable>
        <variable name="snes_source2_vtu_0">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_source2_vtu_0 = vtu.GetField("SNESProjection::Source2")[:,0]</string_value>
        </variable>
        <variable name="snes_source2_vtu_1">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_source2_vtu_1 = vtu.GetField("SNESProjection::Source2")[:,1]</string_value>
        </variable>
        <variable name="snes_source1_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_source1_vtu = vtu.GetField("SNESProjection::Source1")[:,0]</string_value>
        </variable>
        <variable name="picard_source1_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_source1_vtu = vtu.GetField("PicardProjection::Source1")</string_value>
        </variable>
        <variable name="snes_resfield1_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_resfield1_vtu = vtu.GetField("SNESProjection::ResidualField1")</string_value>
        </variable>
        <variable name="picard_dummy_vtu">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
picard_dummy_vtu = vtu.GetField("PicardProjection::Dummy")</string_value>
        </variable>
        <variable name="snes_field2_vtu_0">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_field2_vtu_0 = vtu.GetField("SNESProjection::Field2")[:,0]</string_value>
        </variable>
        <variable name="snes_field2_vtu_1">
          <string_value lines="20" type="code" language="python">
import buckettools.vtktools as vtktools
vtu = vtktools.vtu("projection000010.vtu")
snes_field2_vtu_1 = vtu.GetField("SNESProjection::Field2")[:,1]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="timestep_count">
      <string_value lines="20" type="code" language="python">assert timestep_count==10</string_value>
    </test>
    <test name="picard_field1_min">
      <string_value lines="20" type="code" language="python">assert abs(picard_field1_min - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field1_max">
      <string_value lines="20" type="code" language="python">assert abs(picard_field1_max - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field1_int">
      <string_value lines="20" type="code" language="python">assert abs(picard_field1_int - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_source1_int">
      <string_value lines="20" type="code" language="python">assert abs(picard_source1_int - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field2_min_0">
      <string_value lines="20" type="code" language="python">assert abs(picard_field2_min_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field2_max_0">
      <string_value lines="20" type="code" language="python">assert abs(picard_field2_max_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field2_int_0">
      <string_value lines="20" type="code" language="python">assert abs(picard_field2_int_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_source2_int_0">
      <string_value lines="20" type="code" language="python">assert abs(picard_source2_int_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field2_min_1">
      <string_value lines="20" type="code" language="python">assert abs(picard_field2_min_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field2_max_1">
      <string_value lines="20" type="code" language="python">assert abs(picard_field2_max_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_field2_int_1">
      <string_value lines="20" type="code" language="python">assert abs(picard_field2_int_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_source2_int_1">
      <string_value lines="20" type="code" language="python">assert abs(picard_source2_int_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="picard_dummy_max">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_dummy_max - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_dummy_min">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_dummy_min - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field1_min">
      <string_value lines="20" type="code" language="python">assert abs(snes_field1_min - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field1_max">
      <string_value lines="20" type="code" language="python">assert abs(snes_field1_max - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field1_int">
      <string_value lines="20" type="code" language="python">assert abs(snes_field1_int - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_source1_int">
      <string_value lines="20" type="code" language="python">assert abs(snes_source1_int - 1000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field2_min_0">
      <string_value lines="20" type="code" language="python">assert abs(snes_field2_min_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field2_max_0">
      <string_value lines="20" type="code" language="python">assert abs(snes_field2_max_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field2_int_0">
      <string_value lines="20" type="code" language="python">assert abs(snes_field2_int_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_source2_int_0">
      <string_value lines="20" type="code" language="python">assert abs(snes_source2_int_0 - 2000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field2_min_1">
      <string_value lines="20" type="code" language="python">assert abs(snes_field2_min_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field2_max_1">
      <string_value lines="20" type="code" language="python">assert abs(snes_field2_max_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_field2_int_1">
      <string_value lines="20" type="code" language="python">assert abs(snes_field2_int_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_source2_int_1">
      <string_value lines="20" type="code" language="python">assert abs(snes_source2_int_1 - 3000.0) &lt; 1.e-7</string_value>
    </test>
    <test name="snes_dummy_max">
      <string_value lines="20" type="code" language="python">import numpy

assert numpy.all(abs(snes_dummy_max - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_dummy_min">
      <string_value lines="20" type="code" language="python">import numpy

assert numpy.all(abs(snes_dummy_min - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_resfield2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_resfield2_vtu_1) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field1_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_field1_vtu_1-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_dummy_vtu">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_dummy_vtu-6.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_field1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_field1_vtu-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_resfield2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_resfield2_vtu_0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_source2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_source2_vtu_0-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_source2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_source2_vtu_1-3000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="locations_vtu">
      <string_value lines="20" type="code" language="python">import numpy
locations = numpy.array([[ 0.5 ,  0.  ,  0.  ],
 [ 0.25,  0.25,  0.  ],
 [ 0.  ,  0.  ,  0.  ],
 [ 0.  ,  0.5 ,  0.  ],
 [ 0.75,  0.25,  0.  ],
 [ 1.  ,  0.  ,  0.  ],
 [ 1.  ,  0.5 ,  0.  ],
 [ 0.5 ,  0.5 ,  0.  ],
 [ 0.75,  0.75,  0.  ],
 [ 0.25,  0.75,  0.  ],
 [ 0.  ,  1.  ,  0.  ],
 [ 1.  ,  1.  ,  0.  ],
 [ 0.5 ,  1.  ,  0.  ]]) # the p2 locations

assert numpy.all(locations_vtu == locations)</string_value>
    </test>
    <test name="picard_resfield1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_resfield1_vtu) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_resfield2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_resfield2_vtu_1) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_resfield2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_resfield2_vtu_0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_field2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_field2_vtu_0-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_field2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_field2_vtu_1-3000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_source2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_source2_vtu_0-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_source2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_source2_vtu_1-3000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_source1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_source1_vtu-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_source1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_source1_vtu-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_resfield1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_resfield1_vtu) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_dummy_vtu">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(picard_dummy_vtu-6.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_field2_vtu_0-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(abs(snes_field2_vtu_1-3000.0) &lt; 1.e-9)</string_value>
    </test>
  </tests>
</harness_options>
