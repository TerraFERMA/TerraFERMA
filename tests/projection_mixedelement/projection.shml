<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">Projection using a mixed element.</string_value>
  </description>
  <simulations>
    <simulation name="Projection">
      <input_file>
        <string_value type="filename" lines="1">projection.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="nproc">
          <values>
            <string_value lines="1">1 2 3</string_value>
          </values>
          <process_scale>
            <integer_value rank="1" shape="3">1 2 3</integer_value>
          </process_scale>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="timestep_count">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

timestep_count = stat["timestep"]["value"][-1]</string_value>
        </variable>
        <variable name="picard_field1_min">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field1_min = stat["PicardProjection"]["Field1"]["min"][-1]</string_value>
        </variable>
        <variable name="picard_field1_max">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field1_max = stat["PicardProjection"]["Field1"]["max"][-1]</string_value>
        </variable>
        <variable name="picard_field1_int">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field1_int = stat["PicardProjection"]["Field1Integral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="picard_source1_int">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_source1_int = stat["PicardProjection"]["Source1Integral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="picard_field2_min_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_min_0 = stat["PicardProjection"]["Field2"]["max"][0][-1]</string_value>
        </variable>
        <variable name="picard_field2_max_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_max_0 = stat["PicardProjection"]["Field2"]["min"][0][-1]</string_value>
        </variable>
        <variable name="picard_field2_int_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_int_0 = stat["PicardProjection"]["Field2Integral0"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="picard_source2_int_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_source2_int_0 = stat["PicardProjection"]["Source2Integral0"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="picard_field2_min_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_min_1 = stat["PicardProjection"]["Field2"]["max"][1][-1]</string_value>
        </variable>
        <variable name="picard_field2_max_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_max_1 = stat["PicardProjection"]["Field2"]["min"][1][-1]</string_value>
        </variable>
        <variable name="picard_field2_int_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_field2_int_1 = stat["PicardProjection"]["Field2Integral1"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="picard_source2_int_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_source2_int_1 = stat["PicardProjection"]["Source2Integral1"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="picard_dummy_max">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_dummy_max = stat["PicardProjection"]["Dummy"]["max"]</string_value>
        </variable>
        <variable name="picard_dummy_min">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

picard_dummy_min = stat["PicardProjection"]["Dummy"]["min"]</string_value>
        </variable>
        <variable name="snes_field1_min">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field1_min = stat["SNESProjection"]["Field1"]["min"][-1]</string_value>
        </variable>
        <variable name="snes_field1_max">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field1_max = stat["SNESProjection"]["Field1"]["max"][-1]</string_value>
        </variable>
        <variable name="snes_field1_int">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field1_int = stat["SNESProjection"]["Field1Integral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_source1_int">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source1_int = stat["SNESProjection"]["Source1Integral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_field2_min_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_min_0 = stat["SNESProjection"]["Field2"]["min"][0][-1]</string_value>
        </variable>
        <variable name="snes_field2_max_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_max_0 = stat["SNESProjection"]["Field2"]["max"][0][-1]</string_value>
        </variable>
        <variable name="snes_field2_int_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_int_0 = stat["SNESProjection"]["Field2Integral0"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_source2_int_0">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source2_int_0 = stat["SNESProjection"]["Source2Integral0"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_field2_min_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_min_1 = stat["SNESProjection"]["Field2"]["min"][1][-1]</string_value>
        </variable>
        <variable name="snes_field2_max_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_max_1 = stat["SNESProjection"]["Field2"]["max"][1][-1]</string_value>
        </variable>
        <variable name="snes_field2_int_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field2_int_1 = stat["SNESProjection"]["Field2Integral1"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_source2_int_1">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source2_int_1 = stat["SNESProjection"]["Source2Integral1"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_dummy_max">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_dummy_max = stat["SNESProjection"]["Dummy"]["max"]</string_value>
        </variable>
        <variable name="snes_field3_min_00">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_min_00 = stat["SNESProjection"]["Field3"]["max"][0][-1]</string_value>
        </variable>
        <variable name="snes_field3_max_00">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_max_00 = stat["SNESProjection"]["Field3"]["min"][0][-1]</string_value>
        </variable>
        <variable name="snes_field3_int_00">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_int_00 = stat["SNESProjection"]["Field3Integral00"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_source3_int_00">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source3_int_00 = stat["SNESProjection"]["Source3Integral00"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_field3_min_01">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_min_01 = stat["SNESProjection"]["Field3"]["max"][1][-1]</string_value>
        </variable>
        <variable name="snes_field3_max_01">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_max_01 = stat["SNESProjection"]["Field3"]["min"][1][-1]</string_value>
        </variable>
        <variable name="snes_field3_int_01">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_int_01 = stat["SNESProjection"]["Field3Integral01"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_source3_int_01">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source3_int_01 = stat["SNESProjection"]["Source3Integral01"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_field3_min_10">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_min_10 = stat["SNESProjection"]["Field3"]["max"][2][-1]</string_value>
        </variable>
        <variable name="snes_field3_max_10">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_max_10 = stat["SNESProjection"]["Field3"]["min"][2][-1]</string_value>
        </variable>
        <variable name="snes_field3_int_10">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_int_10 = stat["SNESProjection"]["Field3Integral10"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_source3_int_10">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source3_int_10 = stat["SNESProjection"]["Source3Integral10"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_field3_min_11">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_min_11 = stat["SNESProjection"]["Field3"]["max"][3][-1]</string_value>
        </variable>
        <variable name="snes_field3_max_11">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_max_11 = stat["SNESProjection"]["Field3"]["min"][3][-1]</string_value>
        </variable>
        <variable name="snes_field3_int_11">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_field3_int_11 = stat["SNESProjection"]["Field3Integral11"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_source3_int_11">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_source3_int_11 = stat["SNESProjection"]["Source3Integral11"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="snes_dummy_min">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("projection.stat")

snes_dummy_min = stat["SNESProjection"]["Dummy"]["min"]</string_value>
        </variable>
        <!--<variable name="picard_field1_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_field1_vtu = vtu.GetField("PicardProjection::Field1")</string_value>
        </variable>
        <variable name="snes_resfield2_vtu_1">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_resfield2_vtu_1 = vtu.GetField("SNESProjection::ResidualField2")[:,1]</string_value>
        </variable>
        <variable name="snes_field1_vtu_1">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_field1_vtu_1 = vtu.GetField("SNESProjection::Field1")</string_value>
        </variable>
        <variable name="snes_dummy_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_dummy_vtu = vtu.GetField("SNESProjection::Dummy")</string_value>
        </variable>
        <variable name="picard_field1_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_field1_vtu = vtu.GetField("PicardProjection::Field1")</string_value>
        </variable>
        <variable name="snes_resfield2_vtu_0">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_resfield2_vtu_0 = vtu.GetField("SNESProjection::ResidualField2")[:,0]</string_value>
        </variable>-->
        <!--<variable name="picard_source2_vtu_0">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_source2_vtu_0 = vtu.GetField("PicardProjection::Source2")[:,0]</string_value>
        </variable>
        <variable name="picard_source2_vtu_1">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_source2_vtu_1 = vtu.GetField("PicardProjection::Source2")[:,1]</string_value>
        </variable>-->
        <!--<variable name="locations_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
locations_vtu = vtu.GetLocations()</string_value>
        </variable>
        <variable name="picard_resfield1_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_resfield1_vtu = vtu.GetField("PicardProjection::ResidualField1")</string_value>
        </variable>
        <variable name="picard_resfield2_vtu_1">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_resfield2_vtu_1 = vtu.GetField("PicardProjection::ResidualField2")[:,1]</string_value>
        </variable>
        <variable name="picard_resfield2_vtu_0">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_resfield2_vtu_0 = vtu.GetField("PicardProjection::ResidualField2")[:,0]</string_value>
        </variable>
        <variable name="picard_field2_vtu_0">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_field2_vtu_0 = vtu.GetField("PicardProjection::Field2")[:,0]</string_value>
        </variable>
        <variable name="picard_field2_vtu_1">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_field2_vtu_1 = vtu.GetField("PicardProjection::Field2")[:,1]</string_value>
        </variable>-->
        <!--<variable name="snes_source2_vtu_0">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_source2_vtu_0 = vtu.GetField("SNESProjection::Source2")[:,0]</string_value>
        </variable>
        <variable name="snes_source2_vtu_1">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_source2_vtu_1 = vtu.GetField("SNESProjection::Source2")[:,1]</string_value>
        </variable>-->
        <!--<variable name="snes_source1_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_source1_vtu = vtu.GetField("SNESProjection::Source1")[:,0]</string_value>
        </variable>
        <variable name="picard_source1_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_source1_vtu = vtu.GetField("PicardProjection::Source1")</string_value>
        </variable>
        <variable name="snes_resfield1_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_resfield1_vtu = vtu.GetField("SNESProjection::ResidualField1")</string_value>
        </variable>
        <variable name="picard_dummy_vtu">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
picard_dummy_vtu = vtu.GetField("PicardProjection::Dummy")</string_value>
        </variable>
        <variable name="snes_field2_vtu_0">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_field2_vtu_0 = vtu.GetField("SNESProjection::Field2")[:,0]</string_value>
        </variable>
        <variable name="snes_field2_vtu_1">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_field2_vtu_1 = vtu.GetField("SNESProjection::Field2")[:,1]</string_value>
        </variable>
        <variable name="snes_field3_vtu_00">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_field3_vtu_00 = vtu.GetField("SNESProjection::Field3")[:,0,0]</string_value>
        </variable>
        <variable name="snes_field3_vtu_01">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_field3_vtu_01 = vtu.GetField("SNESProjection::Field3")[:,0,1]</string_value>
        </variable>
        <variable name="snes_field3_vtu_10">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_field3_vtu_10 = vtu.GetField("SNESProjection::Field3")[:,1,0]</string_value>
        </variable>
        <variable name="snes_field3_vtu_11">
          <string_value type="code" language="python3" lines="20">import buckettools.vtktools as vtktools

filename = "projection.xdmf"
vtu = vtktools.vtu(filename)
snes_field3_vtu_11 = vtu.GetField("SNESProjection::Field3")[:,1,1]</string_value>
        </variable>-->
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="timestep_count">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(numpy.array(timestep_count)==10)</string_value>
    </test>
    <test name="picard_field1_min">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field1_min) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field1_max">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field1_max) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field1_int">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field1_int) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_source1_int">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_source1_int) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field2_min_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field2_min_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field2_max_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field2_max_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field2_int_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field2_int_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_source2_int_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_source2_int_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field2_min_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field2_min_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field2_max_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field2_max_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_field2_int_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_field2_int_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_source2_int_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_source2_int_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_dummy_max">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_dummy_max) - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="picard_dummy_min">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(picard_dummy_min) - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field1_min">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field1_min) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field1_max">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field1_max) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field1_int">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field1_int) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_source1_int">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_source1_int) - 1000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field2_min_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field2_min_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field2_max_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field2_max_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field2_int_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field2_int_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_source2_int_0">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_source2_int_0) - 2000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field2_min_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field2_min_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field2_max_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field2_max_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field2_int_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field2_int_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_source2_int_1">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_source2_int_1) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_min_00">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_min_00) - 4000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_max_00">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_max_00) - 4000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_int_00">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_int_00) - 4000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_source3_int_00">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_source3_int_00) - 3000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_min_01">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_min_01) - 4250.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_max_01">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_max_01) - 4250.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_int_01">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_int_01) - 4250.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_source3_int_01">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_source3_int_01) - 4250.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_min_10">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_min_10) - 4750.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_max_10">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_max_10) - 4750.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_int_10">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_int_10) - 4750.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_source3_int_10">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_source3_int_10) - 4750.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_min_11">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_min_11) - 5000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_max_11">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_max_11) - 5000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_field3_int_11">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_field3_int_11) - 5000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_source3_int_11">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_source3_int_11) - 6000.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_dummy_max">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_dummy_max) - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <test name="snes_dummy_min">
      <string_value type="code" language="python3" lines="20">import numpy

assert numpy.all(abs(numpy.array(snes_dummy_min) - 6.0) &lt; 1.e-7)</string_value>
    </test>
    <!--<test name="snes_resfield2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_resfield2_vtu_1: assert numpy.all(abs(v) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field1_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_field1_vtu_1: assert numpy.all(abs(v-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_dummy_vtu">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_dummy_vtu: assert numpy.all(abs(v-6.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_field1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_field1_vtu: assert numpy.all(abs(v-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_resfield2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_resfield2_vtu_0: assert numpy.all(abs(v) &lt; 1.e-9)</string_value>
    </test>-->
    <!--<test name="picard_source2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_source2_vtu_0: assert numpy.all(abs(v-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_source2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_source2_vtu_1: assert numpy.all(abs(v-3000.0) &lt; 1.e-9)</string_value>
    </test>-->
    <!--<test name="locations_vtu">
      <string_value lines="20" type="code" language="python">import numpy
tolerance = 1.e-6
locations = numpy.array([
       [ 0.   ,  0.   ,  0.   ],
       [ 0.5  ,  0.   ,  0.   ],
       [ 1.   ,  0.   ,  0.   ],
       [ 0.   ,  0.5  ,  0.   ],
       [ 0.5  ,  0.5  ,  0.   ],
       [ 1.   ,  0.5  ,  0.   ],
       [ 0.   ,  1.   ,  0.   ],
       [ 0.5  ,  1.   ,  0.   ],
       [ 1.   ,  1.   ,  0.   ],
       [ 0.25 ,  0.25 ,  0.   ],
       [ 0.75 ,  0.25 ,  0.   ],
       [ 0.25 ,  0.75 ,  0.   ],
       [ 0.75 ,  0.75 ,  0.   ],
 ]) # the p1 locations

for j in range(locations.shape[1]):
  # compute the smallest possible precision given the range of this coordinate
  epsilon = numpy.finfo(numpy.float).eps * numpy.abs(locations[:,j]).max()
  if tolerance&lt;epsilon:
    # the specified tolerance is smaller than possible machine precision
    # (or something else went wrong)
    raise Exception("ERROR: specified tolerance is smaller than machine precision of given locations")
  # ensure epsilon doesn't get too small (might be for zero for instance)
  epsilon=max(epsilon,tolerance/100.0)
  # round to that many decimal places (-2 to be sure) so that
  # we don't get rounding issues with lexsort
  locations[:,j]=numpy.around(locations[:,j], int(-numpy.log10(epsilon))-2)

# lexical sort on x,y and z coordinates
sort_index=numpy.lexsort(locations.T)
  
for np in locations_vtu.parameters['nproc']:
  locations_vtu_nproc = locations_vtu[{'nproc':np}]
  for j in range(locations_vtu_nproc.shape[1]):
    # compute the smallest possible precision given the range of this coordinate
    epsilon = numpy.finfo(numpy.float).eps * numpy.abs(locations_vtu_nproc[:,j]).max()
    if tolerance&lt;epsilon:
      # the specified tolerance is smaller than possible machine precision
      # (or something else went wrong)
      raise Exception("ERROR: specified tolerance is smaller than machine precision of given locations")
    # ensure epsilon doesn't get too small (might be for zero for instance)
    epsilon=max(epsilon,tolerance/100.0)
    # round to that many decimal places (-2 to be sure) so that
    # we don't get rounding issues with lexsort
    locations_vtu_nproc[:,j]=numpy.around(locations_vtu_nproc[:,j], int(-numpy.log10(epsilon))-2)
  
  # lexical sort on x,y and z coordinates
  if int(np) &gt; 1:
    locations_vtu_nproc = numpy.array(list(set([tuple(l) for l in locations_vtu_nproc])))
  assert(locations_vtu_nproc.shape == locations.shape)

  sort_index_vtu=numpy.lexsort(locations_vtu_nproc.T)
  # should now be in same order, so we can check for its biggest difference
  assert(numpy.allclose(locations[sort_index],locations_vtu_nproc[sort_index_vtu], atol=tolerance))</string_value>
    </test>
    <test name="picard_resfield1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_resfield1_vtu: assert numpy.all(abs(v) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_resfield2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_resfield2_vtu_1: assert numpy.all(abs(v) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_resfield2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_resfield2_vtu_0: assert numpy.all(abs(v) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_field2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_field2_vtu_0: assert numpy.all(abs(v-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_field2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_field2_vtu_1: assert numpy.all(abs(v-3000.0) &lt; 1.e-9)</string_value>
    </test>-->
    <!--<test name="snes_source2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_source2_vtu_0: assert numpy.all(abs(v-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_source2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_source2_vtu_1: assert numpy.all(abs(v-3000.0) &lt; 1.e-9)</string_value>
    </test>-->
    <!--<test name="snes_source1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_source1_vtu: assert numpy.all(abs(v-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_source1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_source1_vtu: assert numpy.all(abs(v-1000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_resfield1_vtu">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_resfield1_vtu: assert numpy.all(abs(v) &lt; 1.e-9)</string_value>
    </test>
    <test name="picard_dummy_vtu">
      <string_value lines="20" type="code" language="python">import numpy
for v in picard_dummy_vtu: assert numpy.all(abs(v-6.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field2_vtu_0">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_field2_vtu_0: assert numpy.all(abs(v-2000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field2_vtu_1">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_field2_vtu_1: assert numpy.all(abs(v-3000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field3_vtu_00">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_field3_vtu_00: assert numpy.all(abs(v-4000.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field3_vtu_01">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_field3_vtu_01: assert numpy.all(abs(v-4250.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field3_vtu_10">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_field3_vtu_10: assert numpy.all(abs(v-4750.0) &lt; 1.e-9)</string_value>
    </test>
    <test name="snes_field3_vtu_11">
      <string_value lines="20" type="code" language="python">import numpy
for v in snes_field3_vtu_11: assert numpy.all(abs(v-5000.0) &lt; 1.e-9)</string_value>
    </test>-->
  </tests>
</harness_options>
