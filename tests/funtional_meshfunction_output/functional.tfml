<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">1 1</integer_value>
        </number_cells>
        <diagonal>
          <string_value lines="1">crossed</string_value>
        </diagonal>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">functional</string_value>
    </output_base_name>
    <visualization>
      <element name="P1">
        <family>
          <string_value>CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">1</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods/>
    <detectors/>
  </io>
  <global_parameters/>
  <system name="System">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">s</string_value>
    </ufl_symbol>
    <field name="Field">
      <ufl_symbol name="global">
        <string_value lines="1">f</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">1.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <coefficient name="One">
      <ufl_symbol name="global">
        <string_value lines="1">o</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">1.0</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="MaxFacet">
      <ufl_symbol name="global">
        <string_value lines="1">mf</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P0R">
            <family>
              <string_value lines="1">R</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">mutable double maxvalue;
mutable int last_timestep;
dolfin::FacetFunction&lt;double&gt; *ff;
FunctionalBucket_ptr f;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">ff = new dolfin::FacetFunction&lt;double&gt;(system()-&gt;mesh()); //small? memory leak here on destruction
f = system()-&gt;fetch_functional("Fieldint");
last_timestep = -1;
maxvalue = -1.e9;</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">if (bucket()-&gt;timestep_count() != last_timestep)
{
  *ff = f-&gt;facetfunction();
  std::cout &lt;&lt; "in MaxFacet eval " &lt;&lt; last_timestep &lt;&lt; ", " &lt;&lt; bucket()-&gt;timestep_count() &lt;&lt; "\n";
  last_timestep = bucket()-&gt;timestep_count();
  maxvalue = *std::max_element(ff-&gt;values(), ff-&gt;values()+ff-&gt;size()); 
}
values[0] = maxvalue;</string_value>
              </eval>
            </cpp>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics/>
      </diagnostics>
    </coefficient>
    <coefficient name="MaxCell">
      <ufl_symbol name="global">
        <string_value lines="1">mc</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P0R">
            <family>
              <string_value lines="1">R</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">mutable double maxvalue;
mutable int last_timestep;
dolfin::CellFunction&lt;double&gt; *cf;
FunctionalBucket_ptr f;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">cf = new dolfin::CellFunction&lt;double&gt;(system()-&gt;mesh()); //small? memory leak here on destruction
f = system()-&gt;fetch_functional("Fieldint");
last_timestep = -1;
maxvalue = -1.e9;</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">if (bucket()-&gt;timestep_count() != last_timestep)
{
  *cf = f-&gt;cellfunction(true);
  std::cout &lt;&lt; "in MaxCell eval " &lt;&lt; last_timestep &lt;&lt; ", " &lt;&lt; bucket()-&gt;timestep_count() &lt;&lt; "\n";
  last_timestep = bucket()-&gt;timestep_count();
  maxvalue = *std::max_element(cf-&gt;values(), cf-&gt;values()+cf-&gt;size()); 
}
values[0] = maxvalue;</string_value>
              </eval>
            </cpp>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics/>
      </diagnostics>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">r = f_t*(f_i - o_i)*dx</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, s_i, s_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form_representation name="quadrature"/>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-1</real_value>
        </relative_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="none"/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <functional name="Fieldint">
      <string_value lines="20" type="code" language="python">int = (f/CellVolume(s_e.cell()))*dx \
      + (avg(f)/FacetArea(s_e.cell()))*dS \
      + (f/FacetArea(s_e.cell()))*ds</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <form_representation name="quadrature"/>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
      <output_cell_function/>
      <output_facet_function/>
    </functional>
  </system>
</terraferma_options>
