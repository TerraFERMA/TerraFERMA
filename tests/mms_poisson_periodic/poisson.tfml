<?xml version='1.0' encoding='UTF-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">32 32</integer_value>
        </number_cells>
        <diagonal>
          <string_value>right/left</string_value>
        </diagonal>
        <cell>
          <string_value>triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">poisson</string_value>
    </output_base_name>
    <dump_periods/>
    <detectors/>
    <debugging>
      <periodic_boundaries/>
    </debugging>
  </io>
  <global_parameters/>
  <system name="Poisson">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us</string_value>
    </ufl_symbol>
    <field name="Field">
      <ufl_symbol name="global">
        <string_value lines="1">u</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="NonPeriodic">
            <boundary_ids>
              <integer_value shape="2" rank="1">3 4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics>
          </include_in_statistics>
        <include_residual_in_visualization/>
      </diagnostics>
    </field>
    <coefficient name="Source">
      <ufl_symbol name="global">
        <string_value lines="1">f</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">from math import sin,cos,pi
def val(x):
  global sin,cos,pi
  return 20.*pi**2*sin(4.*pi*x[1])*cos(2.*pi*x[0] + 0.25*pi)</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="AnalyticField">
      <ufl_symbol name="global">
        <string_value lines="1">ue</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">from math import sin,cos,pi
def val(x):
  global sin,cos,pi
  return cos(2*pi*x[0] + 0.25*pi)*sin(4*pi*x[1])</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="AbsoluteDifference">
      <ufl_symbol name="global">
        <string_value lines="1">d</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr num_ptr, sol_ptr;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">num_ptr = system()-&gt;fetch_field("Field")-&gt;genericfunction_ptr(time());
sol_ptr = system()-&gt;fetch_coeff("AnalyticField")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">dolfin::Array&lt;double&gt; num(1), sol(1);
num_ptr-&gt;eval(num, x, cell);
sol_ptr-&gt;eval(sol, x, cell);
values[0] = std::abs(num[0] - sol[0]);</string_value>
              </eval>
            </cpp>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics>
          </include_in_statistics>
      </diagnostics>
    </coefficient>
    <boundary_condition name="Periodic">
      <boundary_ids>
        <integer_value shape="1" rank="1">1</integer_value>
      </boundary_ids>
      <sub_components name="All">
        <type type="boundary_condition" name="Periodic">
          <slave_boundary_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </slave_boundary_ids>
          <coordinate_map rank="1">
            <string_value lines="20" type="code" language="python">def val(x):
  return [x[0]-1.0, x[1]]</string_value>
          </coordinate_map>
        </type>
      </sub_components>
    </boundary_condition>
    <nonlinear_solver name="SNES">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">F = (inner(grad(u_t),grad(u_i)) - u_t*f)*dx</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">F</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">J = derivative(F,us_i,us_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="skip"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-7</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-16</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors>
          <view_snes/>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
    <solve name="in_timeloop"/></nonlinear_solver>
    <functional name="FieldL2NormErrorSquared">
            <string_value lines="20" type="code" language="python">e2 = (u-ue)**2*dx</string_value>
            <ufl_symbol name="functional">
              <string_value lines="1">e2</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          <include_in_statistics/></functional>
        <functional name="AbsoluteDifferenceIntegral">
            <string_value lines="20" type="code" language="python">int = d*dx</string_value>
            <ufl_symbol name="functional">
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          <include_in_statistics/></functional>
          <functional name="AbsoluteDifferenceL2NormSquared">
            <string_value lines="20" type="code" language="python">int = d*d*dx</string_value>
            <ufl_symbol name="functional">
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          <include_in_statistics/></functional>
        </system>
</terraferma_options>