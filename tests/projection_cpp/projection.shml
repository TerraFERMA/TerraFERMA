<?xml version='1.0' encoding='UTF-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">Projection test using C++.</string_value>
  </description>
  <simulations>
    <simulation name="Projection">
      <input_file>
        <string_value lines="1" type="filename">projection.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">square.msh</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value lines="20" type="code" language="python3">meshfiles = ["square"+ext for ext in [".h5", "_facet_ids.h5", ".xdmf", "_facet_ids.xdmf"]]
</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="Convert">
              <string_value lines="1">tfgmsh2xdmf square.msh square.xdmf</string_value>
            </command>
            <command name="Remove">
              <string_value lines="1">rm square_cell_ids.xdmf square_cell_ids.h5</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="snes_source2_int_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_int_0 = stat["SNESProjection"]["Source2Integral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_source2_int_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_int_1 = stat["SNESProjection"]["Source2Integral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_int_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_int_1 = stat["PicardProjection"]["FieldEval2Integral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_oldint_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_oldint_1 = stat["PicardProjection"]["FieldEval2OldIntegral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_fieldeval1_min">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval1_min = stat["PicardProjection"]["FieldEval1"]["min"]
</string_value>
        </variable>
        <variable name="picard_source2_int_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_int_0 = stat["PicardProjection"]["Source2Integral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_pysource2_int_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_pysource2_int_0 = stat["PicardProjection"]["PySource2Integral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field2_int_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_int_0 = stat["SNESProjection"]["Field2Integral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field2_int_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_int_1 = stat["SNESProjection"]["Field2Integral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field3_int_00">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field3_int_00 = stat["SNESProjection"]["Field3Integral00"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field3_int_01">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field3_int_01 = stat["SNESProjection"]["Field3Integral01"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field3_int_10">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field3_int_10 = stat["SNESProjection"]["Field3Integral10"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field3_int_11">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field3_int_11 = stat["SNESProjection"]["Field3Integral11"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source2_oldint_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_oldint_0 = stat["PicardProjection"]["Source2OldIntegral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source2_oldint_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_oldint_1 = stat["PicardProjection"]["Source2OldIntegral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_source2_max_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_max_0 = stat["SNESProjection"]["Source2"]["max"][0]
</string_value>
        </variable>
        <variable name="picard_field2_min_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_min_0 = stat["PicardProjection"]["Field2"]["max"][0]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_min_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_min_1 = stat["PicardProjection"]["FieldEval2"]["max"][1]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_min_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_min_0 = stat["PicardProjection"]["FieldEval2"]["max"][0]
</string_value>
        </variable>
        <variable name="picard_source1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source1_int = stat["PicardProjection"]["Source1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_field2_int_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_int_0 = stat["PicardProjection"]["Field2Integral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_field2_int_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_int_1 = stat["PicardProjection"]["Field2Integral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_source1_max">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source1_max = stat["SNESProjection"]["Source1"]["max"]
</string_value>
        </variable>
        <variable name="snes_source2_oldint_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_oldint_0 = stat["SNESProjection"]["Source2OldIntegral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field1_min">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field1_min = stat["SNESProjection"]["Field1"]["min"]
</string_value>
        </variable>
        <variable name="snes_pysource2_int_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_pysource2_int_1 = stat["SNESProjection"]["PySource2Integral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_pysource2_int_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_pysource2_int_0 = stat["SNESProjection"]["PySource2Integral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_fieldeval1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval1_int = stat["PicardProjection"]["FieldEval1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field2_max_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_max_1 = stat["SNESProjection"]["Field2"]["min"][1]
</string_value>
        </variable>
        <variable name="snes_field1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field1_int = stat["SNESProjection"]["Field1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source1_max">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source1_max = stat["PicardProjection"]["Source1"]["max"]
</string_value>
        </variable>
        <variable name="snes_field1_max">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field1_max = stat["SNESProjection"]["Field1"]["max"]
</string_value>
        </variable>
        <variable name="picard_field2_max_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_max_1 = stat["PicardProjection"]["Field2"]["min"][1]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_oldint_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_oldint_0 = stat["PicardProjection"]["FieldEval2OldIntegral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_source2_min_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_min_0 = stat["SNESProjection"]["Source2"]["min"][0]
</string_value>
        </variable>
        <variable name="snes_field2_min_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_min_1 = stat["SNESProjection"]["Field2"]["max"][1]
</string_value>
        </variable>
        <variable name="snes_field2_min_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_min_0 = stat["SNESProjection"]["Field2"]["max"][0]
</string_value>
        </variable>
        <variable name="picard_field2_oldint_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_oldint_0 = stat["PicardProjection"]["Field2OldIntegral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source2_min_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_min_0 = stat["PicardProjection"]["Source2"]["min"][0]
</string_value>
        </variable>
        <variable name="snes_source1_oldint">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source1_oldint = stat["SNESProjection"]["Source1OldIntegral"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_pysource2_oldint_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_pysource2_oldint_0 = stat["SNESProjection"]["PySource2OldIntegral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field2_oldint_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_oldint_1 = stat["SNESProjection"]["Field2OldIntegral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source2_max_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_max_1 = stat["PicardProjection"]["Source2"]["max"][1]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_max_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_max_1 = stat["PicardProjection"]["FieldEval2"]["min"][1]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_max_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_max_0 = stat["PicardProjection"]["FieldEval2"]["min"][0]
</string_value>
        </variable>
        <variable name="picard_field2_min_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_min_1 = stat["PicardProjection"]["Field2"]["max"][1]
</string_value>
        </variable>
        <variable name="picard_field1_min">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field1_min = stat["PicardProjection"]["Field1"]["min"]
</string_value>
        </variable>
        <variable name="picard_field1_oldint">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field1_oldint = stat["PicardProjection"]["Field1OldIntegral"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field2_max_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_max_0 = stat["SNESProjection"]["Field2"]["min"][0]
</string_value>
        </variable>
        <variable name="picard_pysource1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_pysource1_int = stat["PicardProjection"]["PySource1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source2_min_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_min_1 = stat["PicardProjection"]["Source2"]["min"][1]
</string_value>
        </variable>
        <variable name="picard_field2_max_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_max_0 = stat["PicardProjection"]["Field2"]["min"][0]
</string_value>
        </variable>
        <variable name="picard_fieldeval1_oldint">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval1_oldint = stat["PicardProjection"]["FieldEval1OldIntegral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_field2_oldint_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field2_oldint_1 = stat["PicardProjection"]["Field2OldIntegral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_pysource2_oldint_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_pysource2_oldint_1 = stat["PicardProjection"]["PySource2OldIntegral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field1_oldint">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field1_oldint = stat["SNESProjection"]["Field1OldIntegral"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_pysource2_oldint_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_pysource2_oldint_1 = stat["SNESProjection"]["PySource2OldIntegral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source1_min">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source1_min = stat["PicardProjection"]["Source1"]["min"]
</string_value>
        </variable>
        <variable name="snes_source2_oldint_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_oldint_1 = stat["SNESProjection"]["Source2OldIntegral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_pysource1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_pysource1_int = stat["SNESProjection"]["PySource1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field2_oldint_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field2_oldint_0 = stat["SNESProjection"]["Field2OldIntegral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_source1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source1_int = stat["SNESProjection"]["Source1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_pysource2_int_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_pysource2_int_1 = stat["PicardProjection"]["PySource2Integral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_pysource2_oldint_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_pysource2_oldint_0 = stat["PicardProjection"]["PySource2OldIntegral0"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_pysource1_oldint">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_pysource1_oldint = stat["PicardProjection"]["PySource1OldIntegral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_fieldeval1_max">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval1_max = stat["PicardProjection"]["FieldEval1"]["max"]
</string_value>
        </variable>
        <variable name="picard_source2_int_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_int_1 = stat["PicardProjection"]["Source2Integral1"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_source1_oldint">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source1_oldint = stat["PicardProjection"]["Source1OldIntegral"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_pysource1_oldint">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_pysource1_oldint = stat["SNESProjection"]["PySource1OldIntegral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_field1_max">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field1_max = stat["PicardProjection"]["Field1"]["max"]
</string_value>
        </variable>
        <variable name="picard_source2_max_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_source2_max_0 = stat["PicardProjection"]["Source2"]["max"][0]
</string_value>
        </variable>
        <variable name="snes_source2_min_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_min_1 = stat["SNESProjection"]["Source2"]["min"][1]
</string_value>
        </variable>
        <variable name="snes_source1_min">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source1_min = stat["SNESProjection"]["Source1"]["min"]
</string_value>
        </variable>
        <variable name="snes_source2_max_1">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_source2_max_1 = stat["SNESProjection"]["Source2"]["max"][1]
</string_value>
        </variable>
        <variable name="picard_field1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_field1_int = stat["PicardProjection"]["Field1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="picard_fieldeval2_int_0">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

picard_fieldeval2_int_0 = stat["PicardProjection"]["FieldEval2Integral0"]["functional_value"]
</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="snes_source2_int_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_int_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="snes_source2_int_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_int_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="picard_fieldeval2_int_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_int_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="picard_fieldeval2_oldint_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_oldint_1 == [0.0, 0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0])
</string_value>
    </test>
    <test name="picard_fieldeval1_min">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval1_min == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="picard_source2_int_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_int_0 == [2.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0, 2002.0])
</string_value>
    </test>
    <test name="picard_pysource2_int_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_pysource2_int_0 == [2.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0, 2002.0])
</string_value>
    </test>
    <test name="snes_field2_int_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_int_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="snes_field2_int_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_int_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="snes_field3_int_00">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field3_int_00 == [0.0, 400.0, 800.0, 1200.0, 1600.0, 2000.0, 2400.0, 2800.0, 3200.0, 3600.0, 4000.0])
</string_value>
    </test>
    <test name="snes_field3_int_01">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field3_int_01 == [0.0, 500.0, 1000.0, 1500.0, 2000.0, 2500.0, 3000.0, 3500.0, 4000.0, 4500.0, 5000.0])
</string_value>
    </test>
    <test name="snes_field3_int_10">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field3_int_10 == [0.0, 500.0, 1000.0, 1500.0, 2000.0, 2500.0, 3000.0, 3500.0, 4000.0, 4500.0, 5000.0])
</string_value>
    </test>
    <test name="snes_field3_int_11">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field3_int_11 == [0.0, 700.0, 1400.0, 2100.0, 2800.0, 3500.0, 4200.0, 4900.0, 5600.0, 6300.0, 7000.0])
</string_value>
    </test>
    <test name="picard_source2_oldint_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_oldint_0 == [2.0, 2.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0])
</string_value>
    </test>
    <test name="picard_source2_oldint_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_oldint_1 == [2.0, 2.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0])
</string_value>
    </test>
    <test name="snes_source2_max_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_max_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="picard_field2_min_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_field2_min_0 == [2.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0, 2002.0])
</string_value>
    </test>
    <test name="picard_fieldeval2_min_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_min_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="picard_fieldeval2_min_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_min_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="picard_source1_int">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source1_int == [2.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0, 1002.0])
</string_value>
    </test>
    <test name="picard_field2_int_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(abs(picard_field2_int_0 - [2./3., 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0, 2002.0]) &lt; 1.e-6)
</string_value>
    </test>
    <test name="picard_field2_int_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(abs(picard_field2_int_1 - [2./3., 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0, 3002.0]) &lt; 1.e-6)
</string_value>
    </test>
    <test name="snes_source1_max">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source1_max == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="snes_source2_oldint_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_oldint_0 == [0.0, 0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0])
</string_value>
    </test>
    <test name="snes_field1_min">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field1_min == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="snes_pysource2_int_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_pysource2_int_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="snes_pysource2_int_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_pysource2_int_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="picard_fieldeval1_int">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval1_int == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="snes_field2_max_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_max_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="snes_field1_int">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field1_int == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="picard_source1_max">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source1_max == [2.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0, 1002.0])
</string_value>
    </test>
    <test name="snes_field1_max">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field1_max == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="picard_field2_max_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_field2_max_1 == [0.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0, 3002.0])
</string_value>
    </test>
    <test name="picard_fieldeval2_oldint_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_oldint_0 == [0.0, 0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0])
</string_value>
    </test>
    <test name="snes_source2_min_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_min_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="snes_field2_min_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_min_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="snes_field2_min_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_min_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="picard_field2_oldint_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(abs(picard_field2_oldint_0 - [2./3., 2./3., 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0]) &lt; 1.e-6)
</string_value>
    </test>
    <test name="picard_source2_min_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_min_0 == [2.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0, 2002.0])
</string_value>
    </test>
    <test name="snes_source1_oldint">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source1_oldint == [0.0, 0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0])
</string_value>
    </test>
    <test name="snes_pysource2_oldint_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_pysource2_oldint_0 == [0.0, 0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0])
</string_value>
    </test>
    <test name="snes_field2_oldint_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_oldint_1 == [0.0, 0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0])
</string_value>
    </test>
    <test name="picard_source2_max_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_max_1 == [2.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0, 3002.0])
</string_value>
    </test>
    <test name="picard_fieldeval2_max_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_max_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="picard_fieldeval2_max_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_max_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="picard_field2_min_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_field2_min_1 == [2.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0, 3002.0])
</string_value>
    </test>
    <test name="picard_field1_min">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_field1_min == [0.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0, 1002.0])
</string_value>
    </test>
    <test name="picard_field1_oldint">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(abs(picard_field1_oldint - [1.33333333, 1.33333333, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0]) &lt; 1.e-6)
</string_value>
    </test>
    <test name="snes_field2_max_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_max_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
    <test name="picard_pysource1_int">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_pysource1_int == [2.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0, 1002.0])
</string_value>
    </test>
    <test name="picard_source2_min_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_min_1 == [2.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0, 3002.0])
</string_value>
    </test>
    <test name="picard_field2_max_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_field2_max_0 == [0.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0, 2002.0])
</string_value>
    </test>
    <test name="picard_fieldeval1_oldint">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval1_oldint == [0.0, 0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0])
</string_value>
    </test>
    <test name="picard_field2_oldint_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(abs(picard_field2_oldint_1 - [2./3., 2./3., 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0]) &lt; 1.e-6)
</string_value>
    </test>
    <test name="picard_pysource2_oldint_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_pysource2_oldint_1 == [2.0, 2.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0])
</string_value>
    </test>
    <test name="snes_field1_oldint">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field1_oldint == [0.0, 0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0])
</string_value>
    </test>
    <test name="snes_pysource2_oldint_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_pysource2_oldint_1 == [0.0, 0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0])
</string_value>
    </test>
    <test name="picard_source1_min">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source1_min == [2.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0, 1002.0])
</string_value>
    </test>
    <test name="snes_source2_oldint_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_oldint_1 == [0.0, 0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0])
</string_value>
    </test>
    <test name="snes_pysource1_int">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_pysource1_int == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="snes_field2_oldint_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_field2_oldint_0 == [0.0, 0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0])
</string_value>
    </test>
    <test name="snes_source1_int">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source1_int == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="picard_pysource2_int_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_pysource2_int_1 == [2.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0, 3002.0])
</string_value>
    </test>
    <test name="picard_pysource2_oldint_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_pysource2_oldint_0 == [2.0, 2.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0])
</string_value>
    </test>
    <test name="picard_pysource1_oldint">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_pysource1_oldint == [2.0, 2.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0])
</string_value>
    </test>
    <test name="picard_fieldeval1_max">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval1_max == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="picard_source2_int_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_int_1 == [2.0, 302.0, 602.0, 902.0, 1202.0, 1502.0, 1802.0, 2102.0, 2402.0, 2702.0, 3002.0])
</string_value>
    </test>
    <test name="picard_source1_oldint">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source1_oldint == [2.0, 2.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0])
</string_value>
    </test>
    <test name="snes_pysource1_oldint">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_pysource1_oldint == [0.0, 0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0])
</string_value>
    </test>
    <test name="picard_field1_max">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_field1_max == [2.0, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0, 1002.0])
</string_value>
    </test>
    <test name="picard_source2_max_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_source2_max_0 == [2.0, 202.0, 402.0, 602.0, 802.0, 1002.0, 1202.0, 1402.0, 1602.0, 1802.0, 2002.0])
</string_value>
    </test>
    <test name="snes_source2_min_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_min_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="snes_source1_min">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source1_min == [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0])
</string_value>
    </test>
    <test name="snes_source2_max_1">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(snes_source2_max_1 == [0.0, 300.0, 600.0, 900.0, 1200.0, 1500.0, 1800.0, 2100.0, 2400.0, 2700.0, 3000.0])
</string_value>
    </test>
    <test name="picard_field1_int">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(abs(picard_field1_int - [1.33333333, 102.0, 202.0, 302.0, 402.0, 502.0, 602.0, 702.0, 802.0, 902.0, 1002.0]) &lt; 1.e-6)
</string_value>
    </test>
    <test name="picard_fieldeval2_int_0">
      <string_value lines="20" type="code" language="python3">import numpy
assert numpy.all(picard_fieldeval2_int_0 == [0.0, 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0])
</string_value>
    </test>
  </tests>
</harness_options>
