<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Frank">
      <source name="UnitSquare">
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">32 32</integer_value>
        </number_cells>
        <diagonal>
          <string_value>right</string_value>
        </diagonal>
        <cell>
          <string_value>triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">poisson</string_value>
    </output_base_name>
    <visualization>
      <element name="P1">
        <family>
          <string_value>CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">1</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods/>
    <detectors/>
  </io>
  <global_parameters/>
  <system name="SNESPoisson">
    <mesh name="Frank"/>
    <ufl_symbol>
      <string_value lines="1">u</string_value>
    </ufl_symbol>
    <field name="Field">
      <ufl_symbol>
        <string_value lines="1">s</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="TopBottom">
            <boundary_ids>
              <integer_value shape="2" rank="1">3 4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics>
          <functional name="Integral">
            <string_value lines="20" type="code" language="python">int = s*dx</string_value>
            <ufl_symbol>
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          </functional>
        </include_in_statistics>
      </diagnostics>
    </field>
    <coefficient name="Source">
      <ufl_symbol>
        <string_value lines="1">f</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">def val(x):
  from math import exp, pi, sin
  dx = x[0] - 0.5
  dy = x[1] - 0.5
  return x[0]*sin(5.0*pi*x[1]) + 1.0*exp(-(dx*dx + dy*dy)/0.02)</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <boundary_condition name="Periodic">
      <boundary_ids>
        <integer_value shape="1" rank="1">1</integer_value>
      </boundary_ids>
      <sub_components name="All">
        <type type="boundary_condition" name="Periodic">
          <slave_boundary_ids>
            <integer_value shape="1" rank="1">2</integer_value>
          </slave_boundary_ids>
          <coordinate_map rank="1">
            <string_value lines="20" type="code" language="python">def val(x):
  return [x[0]-1.0, x[1]]</string_value>
          </coordinate_map>
        </type>
      </sub_components>
    </boundary_condition>
    <nonlinear_solver name="SimpleSolver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">r = (inner(grad(s_t), grad(s_i)) - s_t*f)*dx</string_value>
          <ufl_symbol>
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, u_i)</string_value>
          <ufl_symbol>
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-10</real_value>
        </relative_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-12</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">1000</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="sor"/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
    </nonlinear_solver>
    <solve name="in_timeloop"/>
  </system>
</terraferma_options>
