<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">1 1</integer_value>
        </number_cells>
        <diagonal>
          <string_value lines="1">left</string_value>
        </diagonal>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">nonlinear_coupled_poisson</string_value>
    </output_base_name>
    <dump_periods/>
    <detectors/>
  </io>
  <nonlinear_systems>
    <relative_error>
      <real_value rank="0">1.e-6</real_value>
    </relative_error>
    <max_iterations>
      <integer_value rank="0">50</integer_value>
    </max_iterations>
    <monitors>
      <convergence_file/>
    </monitors>
    <never_ignore_convergence_failures/>
  </nonlinear_systems>
  <global_parameters/>
  <system name="System1">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us1</string_value>
    </ufl_symbol>
    <field name="Field1">
      <ufl_symbol name="global">
        <string_value lines="1">f1</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">1.</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="LowerLeft">
            <boundary_ids>
              <integer_value shape="2" rank="1">1 3</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <python rank="0">
                  <string_value lines="20" type="code" language="python">from math import exp
def val(x):
  global exp
  return exp(x[0] + x[1]/2.)</string_value>
                </python>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <coefficient name="SourceField1">
      <ufl_symbol name="global">
        <string_value lines="1">s1</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">def val(xx):
  from math import exp
  p1 = 1
  x = xx[0]
  y = xx[1]
  return -(1+p1)*exp(x*(1+p1) + 0.5*y*(1-p1)) - 0.25*(1-p1)*exp(x*(1+p1) + 0.5*y*(1-p1))</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="Power1">
      <ufl_symbol name="global">
        <string_value lines="1">p1</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">1</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="AnalyticField1">
      <ufl_symbol name="global">
        <string_value lines="1">e1</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">from math import exp
def val(x):
  global exp
  return exp(x[0] + x[1]/2.)</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="AbsoluteDifferenceField1">
      <ufl_symbol name="global">
        <string_value lines="1">d1</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr num_ptr, sol_ptr;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">num_ptr = system()-&gt;fetch_field("Field1")-&gt;genericfunction_ptr(time());
sol_ptr = system()-&gt;fetch_coeff("AnalyticField1")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">dolfin::Array&lt;double&gt; num(1), sol(1);
num_ptr-&gt;eval(num, x, cell);
sol_ptr-&gt;eval(sol, x, cell);
values[0] = std::abs(num[0] - sol[0]);</string_value>
              </eval>
            </cpp>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics/>
      </diagnostics>
    </coefficient>
    <coefficient name="BoundaryGradientField1">
      <ufl_symbol name="global">
        <string_value lines="1">g1</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Vector" rank="1">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="1">
              <string_value lines="20" type="code" language="python">from math import exp
def val(x):
  global exp
  return [exp(x[0] + x[1]/2.), 0.5*exp(x[0] + x[1]/2.)]</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">r = (inner(grad(f1_t), (f2_i**p1)*grad(f1_i)) - f1_t*s1)*dx \
     + f1_t*(f2_i**p1)*g1[0]*ds(1) - f1_t*(f2_i**p1)*g1[0]*ds(2) \
     + f1_t*(f2_i**p1)*g1[1]*ds(3) - f1_t*(f2_i**p1)*g1[1]*ds(4)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, us1_i, us1_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form_representation name="quadrature"/>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <functional name="AbsoluteDifferenceField1Integral">
      <string_value lines="20" type="code" language="python">int = d1*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <form_representation name="quadrature"/>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="AbsoluteDifferenceField1L2NormSquared">
      <string_value lines="20" type="code" language="python">int = d1*d1*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <form_representation name="quadrature"/>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
  </system>
  <system name="System2">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us2</string_value>
    </ufl_symbol>
    <field name="Field2">
      <ufl_symbol name="global">
        <string_value lines="1">f2</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">1.</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="UpperRight">
            <boundary_ids>
              <integer_value shape="2" rank="1">2 4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <python rank="0">
                  <string_value lines="20" type="code" language="python">from math import exp
def val(x):
  global exp
  return exp(x[0] - x[1]/2.)</string_value>
                </python>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <coefficient name="SourceField2">
      <ufl_symbol name="global">
        <string_value lines="1">s2</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">def val(xx):
  from math import exp
  p2 = 1
  x = xx[0]
  y = xx[1]
  return -(1+p2)*exp(x*(1+p2) - 0.5*y*(1-p2)) - 0.25*(1-p2)*exp(x*(1+p2) - 0.5*y*(1-p2))</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="Power2">
      <ufl_symbol name="global">
        <string_value lines="1">p2</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">1</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="AnalyticField2">
      <ufl_symbol name="global">
        <string_value lines="1">e2</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python">from math import exp
def val(x):
  global exp
  return exp(x[0] - x[1]/2.)</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="AbsoluteDifferenceField2">
      <ufl_symbol name="global">
        <string_value lines="1">d2</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <cpp rank="0">
              <members>
                <string_value lines="20" type="code" language="cpp">GenericFunction_ptr num_ptr, sol_ptr;</string_value>
              </members>
              <initialization>
                <string_value lines="20" type="code" language="cpp">num_ptr = system()-&gt;fetch_field("Field2")-&gt;genericfunction_ptr(time());
sol_ptr = system()-&gt;fetch_coeff("AnalyticField2")-&gt;genericfunction_ptr(time());</string_value>
              </initialization>
              <eval>
                <string_value lines="20" type="code" language="cpp">dolfin::Array&lt;double&gt; num(1), sol(1);
num_ptr-&gt;eval(num, x, cell);
sol_ptr-&gt;eval(sol, x, cell);
values[0] = std::abs(num[0] - sol[0]);</string_value>
              </eval>
            </cpp>
          </value>
        </rank>
      </type>
      <diagnostics>
        <include_in_statistics/>
      </diagnostics>
    </coefficient>
    <coefficient name="BoundaryGradientField2">
      <ufl_symbol name="global">
        <string_value lines="1">g2</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Vector" rank="1">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="1">
              <string_value lines="20" type="code" language="python">from math import exp
def val(x):
  global exp
  return [exp(x[0] - x[1]/2.), -0.5*exp(x[0] - x[1]/2.)]</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">r = (inner(grad(f2_t), (f1_i**p2)*grad(f2_i)) - f2_t*s2)*dx \
     + f2_t*(f1_i**p2)*g2[0]*ds(1) - f2_t*(f1_i**p2)*g2[0]*ds(2) \
     + f2_t*(f1_i**p2)*g2[1]*ds(3) - f2_t*(f1_i**p2)*g2[1]*ds(4)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, us2_i, us2_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form_representation name="quadrature"/>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <functional name="AbsoluteDifferenceField2Integral">
      <string_value lines="20" type="code" language="python">int = d2*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <form_representation name="quadrature"/>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="AbsoluteDifferenceField2L2NormSquared">
      <string_value lines="20" type="code" language="python">int = d2*d2*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <form_representation name="quadrature"/>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
  </system>
</terraferma_options>
