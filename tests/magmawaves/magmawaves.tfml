<?xml version='1.0' encoding='UTF-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">64 64</integer_value>
        </number_cells>
        <diagonal>
          <string_value>right/left</string_value>
        </diagonal>
        <cell>
          <string_value>triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">magmawaves</string_value>
    </output_base_name>
    <visualization>
      <element name="P1">
        <family>
          <string_value>CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">1</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods>
      <visualization_period>
        <real_value rank="0">0.05</real_value>
      </visualization_period>
      <statistics_period>
        <real_value rank="0">.05</real_value>
      </statistics_period>
      <detectors_period>
        <real_value rank="0">0.025</real_value>
      </detectors_period>
    </dump_periods>
    <detectors>
      <point name="x0">
        <real_value shape="2" dim1="dim" rank="1">.5 .5</real_value>
      </point>
    </detectors>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <finish_time>
      <real_value rank="0">2.</real_value>
    </finish_time>
    <timestep>
      <coefficient name="Timestep">
        <ufl_symbol name="global">
          <string_value lines="1">dt</string_value>
        </ufl_symbol>
        <type name="Constant">
          <rank name="Scalar" rank="0">
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">0.</real_value>
              </constant>
            </value>
          </rank>
        </type>
      </coefficient>
      <adaptive>
        <constraint name="Courant">
          <system name="CourantNumber"/>
          <field name="CourantNumber"/>
          <requested_maximum_value>
            <real_value rank="0">1.0</real_value>
          </requested_maximum_value>
        </constraint>
        <adapt_period>
          <real_value rank="0">.01</real_value>
        </adapt_period>
        <increase_tolerance>
          <real_value rank="0">100.</real_value>
        </increase_tolerance>
      </adaptive>
    </timestep>
  </timestepping>
  <global_parameters/>
  <system name="magma">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us</string_value>
    </ufl_symbol>
    <field name="Pressure">
      <ufl_symbol name="global">
        <string_value lines="1">p</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="Top">
            <boundary_ids>
              <integer_value shape="1" rank="1">4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">0.</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics>
          </include_in_statistics>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <field name="Porosity">
      <ufl_symbol name="global">
        <string_value lines="1">f</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python"># Initialize to single solitary wave profile 
# using PySolwave routines ... need to set python path appropriately 

from solitarywave import *
from numpy import array
from math import sqrt

c = 5.                                 #Wave speed
n = 3                                  # permeability exponent
m = 0                                 # bulk-viscosity exponent
d = 2                                  # dimension
N = 400                              # number of collocation points
swave = SolitaryWave(c,n,m,d,N)

# location of solitary wave maximum
x0 = array([.5, .5]) 

# size of the domain in compaction lengths
h_on_delta = 64.
r_max = 25.

def val(x):
  global x0, h_on_delta, swave, sqrt, array, r_max, d
  if d == 1:
     r = h_on_delta*abs(x[1] - x0[1]) # use 1-D waves
  else: 
     dx = x - x0  # use 2-D waves
     r = h_on_delta*sqrt(sum(dx*dx))
  if r &lt;= r_max:
     #return swave.eval(array([r])) 
     return swave.interp(array([r]))	
  else:
     return 1.0</string_value>
            </python>
          </initial_condition>
          <boundary_condition name="top">
            <boundary_ids>
              <integer_value shape="1" rank="1">4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <constant>
                  <real_value rank="0">1.</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics>
          </include_in_statistics>
        <include_in_steady_state>
          <norm>
            <string_value>linf</string_value>
          </norm>
        </include_in_steady_state>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <coefficient name="W">
      <ufl_symbol name="global">
        <string_value lines="1">W</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Vector" rank="1">
          <value type="value" name="WholeMesh">
            <constant name="dim">
              <real_value shape="2" dim1="dim" rank="1">0. -5.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="phi_analytic">
      <ufl_symbol name="global">
        <string_value lines="1">phi</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value>CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python"># Initialize to single solitary wave profile 
# using PySolwave routines ... need to set python path appropriately 

from solitarywave import *
from numpy import array
from math import sqrt

c = 5.                                 #Wave speed
n = 3                                  # permeability exponent
m = 0                                 # bulk-viscosity exponent
d = 2                                  # dimension
N = 400                              # number of collocation points
swave = SolitaryWave(c,n,m,d,N)

# location of initial solitary wave maximum
x0 = array([.5, .5])
# velocity of wave relative to background advection field 
W0 = 0.

# size of the domain in compaction lengths
h_on_delta = 64.
r_max = 25.

def val(x,t):
  global x0, h_on_delta, swave, sqrt, array, r_max, d,W0
  x0t = x0 + array([0,1])*W0*t
  if d == 1:
     r = h_on_delta*abs(x[1] - x0t[1]) # use 1-D waves
  else: 
     dx = x - x0t  # use 2-D waves
     r = h_on_delta*sqrt(sum(dx*dx))
  if r &lt;= r_max:
     #return swave.eval(array([r])) 
     return swave.interp(array([r]))	
  else:
     return 1.0</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python"># h_on_delta: height of domain in compaction lengths
h_on_delta = 64.
hsquared = h_on_delta**2

# permeability
n = 3
K = f_i**n

#inverse bulk viscosity function (assume constant bulk viscosity)
#m = 0
#Xi = hsquared*f_i**m
Xi = hsquared

# facet normal for forcing term
fn = FacetNormal(f_e.cell()) 

rp = (K*inner(grad(p_t),grad(p_i)) + p_t*Xi*p_i - K*p_t.dx(1))*dx + p_t*K*fn[1]*ds(3)
rf = f_t*(f_i - f_n  + dt*inner(W,grad(f_i)) - 0.5*dt*(Xi*p_i + Xi*p_n))*dx 

r = rp + rf</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">a = derivative(r, us_i, us_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-7</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-11</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-7</real_value>
            </relative_error>
            <max_iterations>
              <integer_value rank="0">50</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors/>
          </iterative_method>
          <preconditioner name="fieldsplit">
            <composite_type name="multiplicative"/>
            <fieldsplit name="Pressure">
              <field name="Pressure"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="preonly"/>
                <preconditioner name="hypre">
                  <hypre_type name="boomeramg"/>
                </preconditioner>
              </linear_solver>
            </fieldsplit>
            <fieldsplit name="Porosity">
              <field name="Porosity"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="gmres">
                  <restart>
                    <integer_value rank="0">30</integer_value>
                  </restart>
                  <relative_error>
                    <real_value rank="0">1.e-3</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">50</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors/>
                </iterative_method>
                <preconditioner name="ilu"/>
              </linear_solver>
            </fieldsplit>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
    <solve name="in_timeloop"/></nonlinear_solver>
    <functional name="PressureIntegralPressure">
            <string_value lines="20" type="code" language="python">int = p*dx</string_value>
            <ufl_symbol name="functional">
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          <include_in_statistics/></functional>
        <functional name="PorosityIntegral">
            <string_value lines="20" type="code" language="python">int = f*dx</string_value>
            <ufl_symbol name="functional">
              <string_value lines="1">int</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          <include_in_statistics/></functional>
          <functional name="PorosityL2error">
            <string_value lines="20" type="code" language="python">L2err = (f - phi)**2*dx</string_value>
            <ufl_symbol name="functional">
              <string_value lines="1">L2err</string_value>
            </ufl_symbol>
            <quadrature_rule name="default"/>
          <include_in_statistics/></functional>
        </system>
  <system name="CourantNumber">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">uc</string_value>
    </ufl_symbol>
    <field name="CourantNumber">
      <ufl_symbol name="global">
        <string_value lines="1">c</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P0">
            <family>
              <string_value>DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="Picard">
        <preamble>
          <string_value lines="20" type="code" language="python">n = FacetNormal(c_e.cell())
vn = dot(W, n)
vout = 0.5*(vn + abs(vn))

r = c_t*c_a*dx - c_t('+')*vout('+')*dt('+')*dS - c_t('-')*vout('-')*dt('-')*dS - c_t*vout*dt*ds(1) - c_t*vout*dt*ds(2) - c_t*vout*dt*ds(3) - c_t*vout*dt*ds(4)</string_value>
        </preamble>
        <form name="Bilinear" rank="1">
          <string_value lines="20" type="code" language="python">a = lhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">a</string_value>
          </ufl_symbol>
        </form>
        <form name="Linear" rank="0">
          <string_value lines="20" type="code" language="python">L = rhs(r)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">L</string_value>
          </ufl_symbol>
        </form>
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python">res = action(a, uc_i) - L</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">res</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-16</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="jacobi"/>
          <monitors/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
    <solve name="with_diagnostics"/></nonlinear_solver>
    </system>
</terraferma_options>
