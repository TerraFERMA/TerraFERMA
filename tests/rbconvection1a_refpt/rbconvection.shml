<?xml version='1.0' encoding='UTF-8'?>
<harness_options>
  <length>
    <string_value>medium</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A test of the reference point in rbconvection.</string_value>
  </description>
  <simulations>
    <simulation name="RBConvection">
      <input_file>
        <string_value lines="1" type="filename">rbconvection.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <variables>
        <variable name="v_rms">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt



stat = parser("rbconvection.stat")

v_rms = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])</string_value>
        </variable>
        <variable name="refpressure">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser



det = parser("rbconvection.det")

refpressure = det["Stokes"]["Pressure"]["Point"]</string_value>
        </variable>
        <variable name="extremumloc">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser



det = parser("rbconvection.det")

extremumloc = (det["Stokes"]["Temperature"]["Array"][0:129/2,-1]).argmin()*1./128.</string_value>
        </variable>
        <variable name="timestepcount">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser



stat = parser("rbconvection.stat")

timestepcount = stat["timestep"]["value"][-1]</string_value>
        </variable>
        <variable name="steady">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser



steady = parser("rbconvection.steady")

steady = max(steady["Stokes"]["VelocityL2NormSquared_change"]["functional_change"][-1], \
steady["Stokes"]["PressureIntegral_change"]["functional_change"][-1], \
steady["Stokes"]["DummyIntegral_change"]["functional_change"][-1], \
steady["Stokes"]["TemperatureBottomSurfaceIntegral_change"]["functional_change"][-1], \
steady["Stokes"]["TemperatureTopSurfaceIntegral_change"]["functional_change"][-1])</string_value>
        </variable>
        <variable name="extremum">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser



det = parser("rbconvection.det")

extremum = (det["Stokes"]["Temperature"]["Array"][0:129/2,-1]).min()</string_value>
        </variable>
        <variable name="elapsedtime">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser



stat = parser("rbconvection.stat")

elapsedtime = stat["ElapsedTime"]["value"][-1]</string_value>
        </variable>
        <variable name="div">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
import numpy



stat = parser("rbconvection.stat")

div = max(numpy.abs(stat["Divergence"]["Divergence"]["max"]).max(), \
numpy.abs(stat["Divergence"]["Divergence"]["min"]).min())</string_value>
        </variable>
        <variable name="nu">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser



stat = parser("rbconvection.stat")

nu = -1.0*(stat["Stokes"]["TemperatureTopSurfaceIntegral"]["functional_value"][-1])</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="v_rms">
      <string_value lines="20" type="code" language="python">assert abs(v_rms - 42.865e-4) &lt; 0.01</string_value>
    </test>
    <test name="refpressure">
      <string_value lines="20" type="code" language="python">import numpy
assert numpy.all(refpressure &lt; 1.e-10)</string_value>
    </test>
    <test name="extremumloc">
      <string_value lines="20" type="code" language="python">assert abs(extremumloc - 0.2265625) &lt; 0.01</string_value>
    </test>
    <test name="timestepcount">
      <string_value lines="20" type="code" language="python">assert abs(timestepcount - 34) &lt; 1</string_value>
    </test>
    <test name="steady">
      <string_value lines="20" type="code" language="python">assert steady &lt; 1.e-5</string_value>
    </test>
    <test name="extremum">
      <string_value lines="20" type="code" language="python">assert abs(extremum - 0.4222) &lt; 0.01</string_value>
    </test>
    <test name="elapsedtime">
      <string_value lines="20" type="code" language="python">assert abs(elapsedtime - 1850.0) &lt; 5.e1</string_value>
    </test>
    <test name="div">
      <string_value lines="20" type="code" language="python">assert div &lt; 1.e-6</string_value>
    </test>
    <test name="nu">
      <string_value lines="20" type="code" language="python">assert nu - 4.9 &lt; 0.05</string_value>
    </test>
  </tests>
</harness_options>