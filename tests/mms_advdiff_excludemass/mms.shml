<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A manufactured solution convergence test.</string_value>
  </description>
  <simulations>
    <simulation name="MMS">
      <input_file>
        <string_value lines="1" type="filename">mms.tfml</string_value>
      </input_file>
      <parameter_sweep>
        <parameter name="npoints">
          <values>
            <string_value lines="1">5 10 20 40 80</string_value>
          </values>
        </parameter>
        <parameter name="degree">
          <values>
            <string_value lines="1">1 2</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
for s in xrange(libspud.option_count("/system")):
  systempath = "/system["+`s`+"]"
  for ftype in ["field", "coefficient"]:
    for f in xrange(libspud.option_count(systempath+"/"+ftype)):
      fieldpath = systempath+"/"+ftype+"["+`f`+"]"
      libspud.set_option(fieldpath+"/type[0]/rank[0]/element[0]/degree", int(degree))</string_value>
            <comment>Cannot be a single_build because these are compile time changes.</comment>
          </update>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">mesh.geo</string_value>
          </input_file>
          <parameter_sweep>
            <parameter name="npoints">
              <update>
                <string_value lines="20" type="code" language="python">from string import Template as template
input_file = template(input_file).safe_substitute({"nhpoints":npoints,"nvpoints":str(int(0.8*float(npoints)))})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value lines="20" type="code" language="python">meshfiles = ["mesh"+ext for ext in [".xml", "_facet_region.xml", "_physical_region.xml"]]</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 mesh.geo -o mesh.msh</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">dolfin-convert mesh.msh mesh.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="error_l2">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("mms.stat")
error_l2 = sqrt(stat["MMS"]["AbsoluteDifference"]["L2NormSquared"][-1])</string_value>
        </variable>
        <variable name="error_linf">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("mms.stat")
error_linf = stat["MMS"]["AbsoluteDifference"]["max"][-1]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="error_l2_p1">
      <string_value lines="20" type="code" language="python">import numpy
print error_l2
print error_l2[{'degree':['1']}]
error_l2_a = numpy.array(error_l2[{'degree':['1']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 1.9))</string_value>
    </test>
    <test name="error_linf_p1">
      <string_value lines="20" type="code" language="python">import numpy
print error_linf[{'degree':['1']}]
error_linf_a = numpy.array(error_linf[{'degree':['1']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 1.5))</string_value>
    </test>
    <test name="error_l2_p2">
      <string_value lines="20" type="code" language="python">import numpy
print error_l2[{'degree':['2']}]
error_l2_a = numpy.array(error_l2[{'degree':['2']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 2.9))</string_value>
    </test>
    <test name="error_linf_p2">
      <string_value lines="20" type="code" language="python">import numpy
print error_linf[{'degree':['2']}]
error_linf_a = numpy.array(error_linf[{'degree':['2']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 2.0))</string_value>
    </test>
  </tests>
</harness_options>
