<?xml version='1.0' encoding='UTF-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">Time dependent projection test.</string_value>
  </description>
  <simulations>
    <simulation name="Projection">
      <input_file>
        <string_value lines="1" type="filename">projection.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="nprocs">
          <values>
            <string_value lines="1">1 2</string_value>
          </values>
          <process_scale>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </process_scale>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">square.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value lines="20" type="code" language="python3">meshfiles = ["square"+ext for ext in [".xdmf", ".h5"]]
</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 square.geo -o square.msh</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">tfgmsh2xdmf square.msh square.xdmf</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="snes_field1_min">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field1_min = stat["SNESProjection"]["Field1"]["min"]
</string_value>
        </variable>
        <variable name="snes_field1_int">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field1_int = stat["SNESProjection"]["Field1Integral"]["functional_value"]
</string_value>
        </variable>
        <variable name="snes_field1_max">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")

snes_field1_max = stat["SNESProjection"]["Field1"]["max"]
</string_value>
        </variable>
        <variable name="snes_field1_int_steady">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



steady = parser("projection.steady")

snes_field1_int_steady = steady["SNESProjection"]["Field1Integral"]["functional_change"]
</string_value>
        </variable>
        <variable name="snes_field1_max_steady">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



steady = parser("projection.steady")

snes_field1_max_steady = steady["SNESProjection"]["Field1"]["change(linf)"]
</string_value>
        </variable>
        <variable name="ntimesteps">
          <string_value lines="20" type="code" language="python3">from buckettools.statfile import parser



stat = parser("projection.stat")
ntimesteps = stat["timestep"]["value"][-1]
</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="snes_field1_min">
      <string_value lines="20" type="code" language="python3">import numpy
test = [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1000.0]
values = snes_field1_min
maxerr = []
for np in values.parameters["nprocs"]:
  maxerr.append(numpy.abs(values[{'nprocs':[np]}]-test).max())
maxerr = numpy.array(maxerr)
print(maxerr)
assert(maxerr.max() &lt; 1.e-6)
</string_value>
    </test>
    <test name="snes_field1_int">
      <string_value lines="20" type="code" language="python3">import numpy
test = [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1000.0]
values = snes_field1_int
maxerr = []
for np in values.parameters["nprocs"]:
  maxerr.append(numpy.abs(values[{'nprocs':[np]}]-test).max())
maxerr = numpy.array(maxerr)
assert(maxerr.max() &lt; 1.e-6)
</string_value>
    </test>
    <test name="snes_field1_max">
      <string_value lines="20" type="code" language="python3">import numpy
test = [0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1000.0]
values = snes_field1_max
maxerr = []
for np in values.parameters["nprocs"]:
  maxerr.append(numpy.abs(values[{'nprocs':[np]}]-test).max())
maxerr = numpy.array(maxerr)
assert(maxerr.max() &lt; 1.e-6)
</string_value>
    </test>
    <test name="snes_field1_max_steady">
      <string_value lines="20" type="code" language="python3">import numpy
evalues = numpy.array([0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1000.0])
echanges = abs(evalues[1:]-evalues[:-1])/abs(evalues[1:])
test = echanges[1:-1:2].tolist() + [echanges[-1]]
values = snes_field1_max_steady
maxerr = []
for np in values.parameters["nprocs"]:
  maxerr.append(numpy.abs(values[{'nprocs':[np]}]-test).max())
maxerr = numpy.array(maxerr)
assert(maxerr.max() &lt; 1.e-6)
</string_value>
    </test>
    <test name="snes_field1_int_steady">
      <string_value lines="20" type="code" language="python3">import numpy
evalues = numpy.array([0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1000.0])
echanges = abs(evalues[1:]-evalues[:-1])/abs(evalues[1:])
test = echanges[1:-1:2].tolist() + [echanges[-1]]
values = snes_field1_int_steady
maxerr = []
for np in values.parameters["nprocs"]:
  maxerr.append(numpy.abs(values[{'nprocs':[np]}]-test).max())
maxerr = numpy.array(maxerr)
assert(maxerr.max() &lt; 1.e-6)
</string_value>
    </test>
    <test name="ntimesteps">
      <string_value lines="20" type="code" language="python3">import numpy
assert((numpy.array(ntimesteps) == 11.0).all())
</string_value>
    </test>
  </tests>
</harness_options>
