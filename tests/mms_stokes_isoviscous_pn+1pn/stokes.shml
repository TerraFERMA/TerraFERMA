<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>cwilson</owner>
  <description>A manufactured solution convergence test.</description>
  <simulations>
    <simulation name="Stokes">
      <input_file>
        <string_value lines="1" type="filename">stokes.tfml</string_value>
      </input_file>
      <parameter_sweep>
        <parameter name="ncells">
          <values>8 16 32</values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/geometry/mesh::Mesh/source::UnitSquare/number_cells", [int(ncells), int(ncells)])</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="n">
          <values>1 2</values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
for s in xrange(libspud.option_count("/system")):
  systempath = "/system["+`s`+"]"
  for ftype in ["field", "coefficient"]:
    for f in xrange(libspud.option_count(systempath+"/"+ftype)):
      fieldpath = systempath+"/"+ftype+"["+`f`+"]"
      fieldname = libspud.get_option(fieldpath+"/name")
      if fieldname.endswith("Velocity"):
        libspud.set_option(fieldpath+"/type[0]/rank[0]/element[0]/degree", int(n)+1)
      elif fieldname.endswith("Pressure") or fieldname.endswith("Divergence"):
        libspud.set_option(fieldpath+"/type[0]/rank[0]/element[0]/degree", int(n))</string_value>
            <comment>Cannot be a single_build because these are compile time changes.</comment>
          </update>
        </parameter>
        <parameter name="np">
          <values>1 2 3</values>
          <process_scale>
            <integer_value shape="3" rank="1">1 2 3</integer_value>
          </process_scale>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="v_error_l2">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
v_error_l2 = sqrt(stat["Stokes"]["AbsoluteDifferenceVelocity"]["L2NormSquared"][-1])</string_value>
        </variable>
        <variable name="v_error_linf">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
v_error_linf = max(stat["Stokes"]["AbsoluteDifferenceVelocity"]['max'][:,-1])</string_value>
        </variable>
        <variable name="p_error_l2">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
p_error_l2 = sqrt(stat["Stokes"]["AbsoluteDifferencePressure"]["L2NormSquared"][-1])</string_value>
        </variable>
        <variable name="p_error_linf">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
p_error_linf = stat["Stokes"]["AbsoluteDifferencePressure"]["max"][-1]</string_value>
        </variable>
        <variable name="nlogs">
          <string_value lines="20" type="code" language="python">import glob
nlogs = len(glob.glob("terraferma.log-?"))</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="v_error_l2_p1_np1">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_l2
print v_error_l2[{'n':['1'], 'np':['1']}]
error_l2_a = numpy.array(v_error_l2[{'n':['1'], 'np':['1']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 2.9))</string_value>
    </test>
    <test name="v_error_linf_p1_np1">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_linf[{'n':['1'], 'np':['1']}]
error_linf_a = numpy.array(v_error_linf[{'n':['1'], 'np':['1']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 2.5))</string_value>
    </test>
    <test name="v_error_l2_p2_np1">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_l2[{'n':['2'], 'np':['1']}]
error_l2_a = numpy.array(v_error_l2[{'n':['2'], 'np':['1']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 3.9))</string_value>
    </test>
    <test name="v_error_linf_p2_np1">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_linf[{'n':['2'], 'np':['1']}]
error_linf_a = numpy.array(v_error_linf[{'n':['2'], 'np':['1']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 3.5))</string_value>
    </test>
    <test name="p_error_l2_p1_np1">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_l2
print p_error_l2[{'n':['1'], 'np':['1']}]
error_l2_a = numpy.array(p_error_l2[{'n':['1'], 'np':['1']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 1.9))</string_value>
    </test>
    <test name="p_error_linf_p1_np1">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_linf[{'n':['1'], 'np':['1']}]
error_linf_a = numpy.array(p_error_linf[{'n':['1'], 'np':['1']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 1.5))</string_value>
    </test>
    <test name="p_error_l2_p2_np1">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_l2[{'n':['2'], 'np':['1']}]
error_l2_a = numpy.array(p_error_l2[{'n':['2'], 'np':['1']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 2.9))</string_value>
    </test>
    <test name="p_error_linf_p2_np1">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_linf[{'n':['2'], 'np':['1']}]
error_linf_a = numpy.array(p_error_linf[{'n':['2'], 'np':['1']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 2.5))</string_value>
    </test>
    <test name="v_error_l2_p1_np2">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_l2
print v_error_l2[{'n':['1'], 'np':['2']}]
error_l2_a = numpy.array(v_error_l2[{'n':['1'], 'np':['2']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 2.9))</string_value>
    </test>
    <test name="v_error_linf_p1_np2">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_linf[{'n':['1'], 'np':['2']}]
error_linf_a = numpy.array(v_error_linf[{'n':['1'], 'np':['2']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 2.5))</string_value>
    </test>
    <test name="v_error_l2_p2_np2">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_l2[{'n':['2'], 'np':['2']}]
error_l2_a = numpy.array(v_error_l2[{'n':['2'], 'np':['2']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 3.9))</string_value>
    </test>
    <test name="v_error_linf_p2_np2">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_linf[{'n':['2'], 'np':['2']}]
error_linf_a = numpy.array(v_error_linf[{'n':['2'], 'np':['2']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 3.5))</string_value>
    </test>
    <test name="p_error_l2_p1_np2">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_l2
print p_error_l2[{'n':['1'], 'np':['2']}]
error_l2_a = numpy.array(p_error_l2[{'n':['1'], 'np':['2']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 1.9))</string_value>
    </test>
    <test name="p_error_linf_p1_np2">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_linf[{'n':['1'], 'np':['2']}]
error_linf_a = numpy.array(p_error_linf[{'n':['1'], 'np':['2']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 1.5))</string_value>
    </test>
    <test name="p_error_l2_p2_np2">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_l2[{'n':['2'], 'np':['2']}]
error_l2_a = numpy.array(p_error_l2[{'n':['2'], 'np':['2']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 2.9))</string_value>
    </test>
    <test name="p_error_linf_p2_np2">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_linf[{'n':['2'], 'np':['2']}]
error_linf_a = numpy.array(p_error_linf[{'n':['2'], 'np':['2']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 2.5))</string_value>
    </test>
    <test name="v_error_l2_p1_np3">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_l2
print v_error_l2[{'n':['1'], 'np':['3']}]
error_l2_a = numpy.array(v_error_l2[{'n':['1'], 'np':['3']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 2.9))</string_value>
    </test>
    <test name="v_error_linf_p1_np3">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_linf[{'n':['1'], 'np':['3']}]
error_linf_a = numpy.array(v_error_linf[{'n':['1'], 'np':['3']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 2.5))</string_value>
    </test>
    <test name="v_error_l2_p2_np3">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_l2[{'n':['2'], 'np':['3']}]
error_l2_a = numpy.array(v_error_l2[{'n':['2'], 'np':['3']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 3.9))</string_value>
    </test>
    <test name="v_error_linf_p2_np3">
      <string_value lines="20" type="code" language="python">import numpy
print v_error_linf[{'n':['2'], 'np':['3']}]
error_linf_a = numpy.array(v_error_linf[{'n':['2'], 'np':['3']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 3.5))</string_value>
    </test>
    <test name="p_error_l2_p1_np3">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_l2
print p_error_l2[{'n':['1'], 'np':['3']}]
error_l2_a = numpy.array(p_error_l2[{'n':['1'], 'np':['3']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 1.9))</string_value>
    </test>
    <test name="p_error_linf_p1_np3">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_linf[{'n':['1'], 'np':['3']}]
error_linf_a = numpy.array(p_error_linf[{'n':['1'], 'np':['3']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 1.5))</string_value>
    </test>
    <test name="p_error_l2_p2_np3">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_l2[{'n':['2'], 'np':['3']}]
error_l2_a = numpy.array(p_error_l2[{'n':['2'], 'np':['3']}])
conv_l2 = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
print conv_l2
assert(numpy.all(conv_l2 &gt; 2.9))</string_value>
    </test>
    <test name="p_error_linf_p2_np3">
      <string_value lines="20" type="code" language="python">import numpy
print p_error_linf[{'n':['2'], 'np':['3']}]
error_linf_a = numpy.array(p_error_linf[{'n':['2'], 'np':['3']}])
conv_linf = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
print conv_linf
assert(numpy.all(conv_linf &gt; 2.5))</string_value>
    </test>
    <test name="nlogs">
      <string_value lines="20" type="code" language="python">import itertools
assert all([anp==int(np) for np in nlogs.parameters['np'] for anp in itertools.chain.from_iterable(nlogs[{'np':np}])])</string_value>
    </test>
  </tests>
</harness_options>
