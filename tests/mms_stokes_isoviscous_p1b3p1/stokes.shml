<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A manufactured solution convergence test.</string_value>
  </description>
  <simulations>
    <simulation name="Stokes">
      <input_file>
        <string_value lines="1" type="filename">stokes.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">8 16 32</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells", [int(ncells), int(ncells)])</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="np">
          <values>
            <string_value lines="1">1 2 3</string_value>
          </values>
          <process_scale>
            <integer_value shape="3" rank="1">1 2 3</integer_value>
          </process_scale>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="v_error_l2">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
v_error_l2 = sqrt(stat["Stokes"]["AbsoluteDifferenceVelocityL2NormSquared"]["functional_value"][-1])</string_value>
        </variable>
        <variable name="v_error_linf">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
v_error_linf = max(stat["Stokes"]["AbsoluteDifferenceVelocity"]['max'][:,-1])</string_value>
        </variable>
        <variable name="p_error_l2">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
p_error_l2 = sqrt(stat["Stokes"]["AbsoluteDifferencePressureL2NormSquared"]["functional_value"][-1])</string_value>
        </variable>
        <variable name="p_error_linf">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
p_error_linf = stat["Stokes"]["AbsoluteDifferencePressure"]["max"][-1]</string_value>
        </variable>
        <variable name="nlogs">
          <string_value lines="20" type="code" language="python">import glob
nlogs = len(glob.glob("terraferma.log-?"))</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="v_error_l2">
      <string_value lines="20" type="code" language="python">import numpy
nprocs = v_error_l2.parameters['np']
for np in nprocs:
  error_l2_a = numpy.array(v_error_l2[{'np':np}])
  conv_p = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
  print 'np=',np,' err=',error_l2_a,' p=',conv_p
  assert(numpy.all(conv_p &gt; 1.9))</string_value>
    </test>
    <test name="v_error_linf">
      <string_value lines="20" type="code" language="python">import numpy
nprocs = v_error_l2.parameters['np']
for np in nprocs:
  error_linf_a = numpy.array(v_error_linf[{'np':np}])
  conv_p = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
  print 'np=',np,' err=',error_linf_a,' p=',conv_p
  assert(numpy.all(conv_p &gt; 1.9))</string_value>
    </test>
    <test name="p_error_l2">
      <string_value lines="20" type="code" language="python">import numpy
nprocs = v_error_l2.parameters['np']
for np in nprocs:
  error_l2_a = numpy.array(p_error_l2[{'np':np}])
  conv_p = numpy.log2(error_l2_a[:-1]/error_l2_a[1:])
  print 'np=',np,' err=',error_l2_a,' p=',conv_p
  assert(numpy.all(conv_p &gt; .9))</string_value>
    </test>
    <test name="p_error_linf">
      <string_value lines="20" type="code" language="python">import numpy
nprocs = v_error_l2.parameters['np']
for np in nprocs:
  error_linf_a = numpy.array(p_error_linf[{'np':np}])
  conv_p = numpy.log2(error_linf_a[:-1]/error_linf_a[1:])
  print 'np=',np,' err=',error_linf_a,' p=',conv_p
  assert(numpy.all(conv_p &gt; .9))</string_value>
    </test>
    <test name="nlogs">
      <string_value lines="20" type="code" language="python">import itertools
assert all([anp==int(np) for np in nlogs.parameters['np'] for anp in nlogs[{'np':np}]])</string_value>
    </test>
  </tests>
</harness_options>
