<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0">
  <!--
    Copyright (C) 2013 Columbia University in the City of New York and others.
    
    Please see the AUTHORS file in the main source directory for a full list
    of contributors.
    
    This file is part of TerraFERMA.
    
    TerraFERMA is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    TerraFERMA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public License
    along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.
  -->
  <include href="spud_base.rng"/>
  <define name="system_ufl_symbol">
    <element name="ufl_symbol">
      <a:documentation>The ufl symbol that will be used in ufl forms and functionals to describe the system function. 
This is the potentially mixed function made up of the fields defined in this system. This ufl
symbol must be unique across the entire options file as it may be used in any ufl form or functional
written in this file.

Several additional symbols will be automatically derived from this base symbol:

- trial (ansatz) function = symbol_a
    (the trial basis function, to be used in linear and bilinear forms)

- test function           = symbol_t
    (the test basis function, to be used in bilinear forms)

- iterated function       = symbol_i
    (the iterated function coefficient, containing the most up to date values for the system function)

- old function            = symbol_n
    (the old function coefficient, containing the values from the previous timestep for the system function)
</a:documentation>
      <attribute name="name">
        <value>global</value>
      </attribute>
      <ref name="anystring"/>
    </element>
  </define>
  <define name="field_ufl_symbol">
    <element name="ufl_symbol">
      <a:documentation>The ufl symbol that will be used in ufl forms and functionals to describe the field. 
This is the potentially sub function of the potentially mixed system function. This ufl
symbol must be unique across the entire options file as it may be used in any ufl form or functional
written in this file.

Several additional symbols will be automatically derived from this base symbol:

- trial (ansatz) function = symbol_a
    (the trial basis function, to be used in linear and bilinear forms)

- test function           = symbol_t
    (the test basis function, to be used in bilinear forms)

- iterated function       = symbol_i
    (the iterated function coefficient, containing the most up to date values for the system function)

- old function            = symbol_n
    (the old function coefficient, containing the values from the previous timestep for the system function)
</a:documentation>
      <attribute name="name">
        <value>global</value>
      </attribute>
      <ref name="anystring"/>
    </element>
  </define>
  <define name="coeff_ufl_symbol">
    <element name="ufl_symbol">
      <a:documentation>The ufl symbol that will be used in ufl forms and functionals to describe the coefficient. 
This ufl symbol must be unique across the entire options file as it may be used in any ufl form or functional
written in this file.

Several additional symbols will be automatically derived from this base symbol:

- iterated function       = symbol_i
    (the iterated function coefficient, containing the most up to date values for the system function)

- old function            = symbol_n
    (the old function coefficient, containing the values from the previous timestep for the system function)
</a:documentation>
      <attribute name="name">
        <value>global</value>
      </attribute>
      <ref name="anystring"/>
    </element>
  </define>
  <define name="form_ufl_symbol">
    <element name="ufl_symbol">
      <a:documentation>The ufl symbol used above to describe a form.  This need only be unique within this nonlinear_solver. 
No additional symbols will be automatically generated based on this symbol.</a:documentation>
      <attribute name="name">
        <value>solver</value>
      </attribute>
      <ref name="anystring"/>
    </element>
  </define>
  <define name="functional_ufl_symbol">
    <element name="ufl_symbol">
      <a:documentation>The ufl symbol used above to describe a functional.  This need not be unique as it is only accessible
from this description.  No additional symbols will be automatically generated based on this symbol.</a:documentation>
      <attribute name="name">
        <value>functional</value>
      </attribute>
      <ref name="anystring"/>
    </element>
  </define>
  <!-- intended for coefficients outside of the systems -->
  <define name="special_ufl_symbol">
    <element name="ufl_symbol">
      <a:documentation>The ufl symbol that will be used in ufl forms and functionals to describe the coefficient. 
This ufl symbol must be unique across the entire options file as it may be used in any ufl form or functional
written in this file.  No additional symbols will be augomatically generated based on this symbol.</a:documentation>
      <attribute name="name">
        <value>global</value>
      </attribute>
      <ref name="anystring"/>
    </element>
  </define>
  <define name="quadrature_degree">
    <optional>
      <element name="quadrature_degree">
        <a:documentation>The quadrature degree that will be used to compute the form.

If unselected ffc will automatically determine the degree for the form.</a:documentation>
        <ref name="integer"/>
      </element>
    </optional>
  </define>
  <define name="form_representation">
    <choice>
      <element name="form_representation">
        <a:documentation>The representation that will be used when generating the forms.</a:documentation>
        <attribute name="name">
          <value>quadrature</value>
        </attribute>
        <ref name="comment"/>
      </element>
      <element name="form_representation">
        <a:documentation>The representation that will be used when generating the forms.</a:documentation>
        <attribute name="name">
          <value>uflacs</value>
        </attribute>
        <ref name="comment"/>
      </element>
      <element name="form_representation">
        <a:documentation>The representation that will be used when generating the forms.</a:documentation>
        <attribute name="name">
          <value>tensor</value>
        </attribute>
        <ref name="comment"/>
      </element>
    </choice>
  </define>
  <define name="quadrature_rule">
    <choice>
      <element name="quadrature_rule">
        <a:documentation>The quadrature rule that will be used when integrating the forms.

The 'default' option covers hand implemented quadrature rules (in ffc) for triangles and tetrahedra with a degree of
precision less than or equal to six.  Above this 'canonical' will automatically be used.

The 'canonical' option relies on FIAT to compute the quadrature rule which is based on Gauss--Legendre--Jacobi rule mapped
onto simplices.</a:documentation>
        <attribute name="name">
          <value>default</value>
        </attribute>
        <ref name="comment"/>
      </element>
      <element name="quadrature_rule">
        <a:documentation>The quadrature rule that will be used when integrating the forms.

The 'canonical' option relies on FIAT to compute the quadrature rule which is based on Gauss--Legendre--Jacobi rule mapped
onto simplices.

The 'default' option covers hand implemented quadrature rules (in ffc) for triangles and tetrahedra with a degree of
precision less than or equal to six.  Above this 'canonical' will automatically be used.</a:documentation>
        <attribute name="name">
          <value>canonical</value>
        </attribute>
        <ref name="comment"/>
      </element>
    </choice>
  </define>
</grammar>
