# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

include "spud_base.rnc"

geometry = 
   (
      ## The parent node for options dealing with the specification of geometry (e.g. the dimension and meshes)
      element geometry {
         ## Dimension of the problem.
         ##
         ## **This can only be set once!**
         ##
         ## This decides the autogenerated shape of all rank>0 options below (though they may still be set independently).
         element dimension {
            # a hard coded integer_value
            element integer_value {
               attribute rank {"0"},
               ( "1" | "2" | "3" )
            },
            comment
         },
         (
           ## Options for describing the mesh with a user-specified name.  This name must be unique.
           element mesh {
             attribute name { xsd:string },
             mesh_options,
             comment
           }|
           ## Options for describing the mesh, automatically called "Mesh".  This name must be unique.
           element mesh {
             attribute name { "Mesh" },
             mesh_options,
             comment
           }
         )+,
         comment
      }
   )

mesh_options =
  (
     (
       ## Choose the source of this mesh as an externally generated mesh file.
       element source {
         attribute name { "File" },
         ## Input the filename of a DOLFIN format mesh. 
         element file {
           filename
         },
         ## Choose the type of ufl cell
         element cell {
           # a hard coded string_value
           element string_value {
             ( "interval" | "triangle" | "tetrahedron" )
           },
           comment
         },
         comment
       }|
       ## Choose the source of this mesh as an internally generated 1d interval of length 1.
       ##
       ## Boundary ids will be automatically assigned as:
       ##
       ##     (left boundary) 1 ----- 2 (right boundary)
       ## 
       ## No region ids will be assigned.   
       ## 
       element source {
         attribute name { "UnitInterval" },
         ## Specify the number of cells.
         element number_cells {
           integer
         },
         ## The ufl cell type (no option allowed).
         element cell {
           element string_value {
             "interval"
           },
           comment
         },
         comment
       }|
       ## Choose the source of this mesh as an internally generated 1d interval.
       ##
       ## Boundary ids will be automatically assigned as:
       ##
       ##     (left boundary) 1 ----- 2 (right boundary)
       ## 
       ## No region ids will be assigned.   
       ## 
       element source {
         attribute name { "Interval" },
         ## Location of left boundary.
         element left {
           real
         },
         ## Location of right boundary.
         element right {
           real
         },
         ## Specify the number of cells.
         element number_cells {
           integer
         },
         ## The ufl cell type (no option allowed).
         element cell {
           element string_value {
             "interval"
           },
           comment
         },
         comment
       }|
       ## Choose the source of this mesh as an internally generated 2d square of width and height 1.
       ##
       ## Boundary ids will be automatically assigned as:
       ##                          4 (top boundary)
       ##                        ----- 
       ##     (left boundary) 1 |     | 2 (right boundary)
       ##                        ----- 
       ##                          3 (bottom boundary)
       ## 
       ## No region ids will be assigned.   
       ## 
       element source {
         attribute name { "UnitSquare" },
         ## Specify the number of cells in each dimension.
         element number_cells {
           integer_2_vector
         },
         ## Specify the direction in which the diagonal should lie.
         element diagonal {
           # a hard coded string_value
           element string_value {
             ( "left" | "right" | "right/left" | "left/right" | "crossed" )
           },
           comment
         },
         ## The ufl cell type (no option allowed).
         element cell {
           element string_value {
             "triangle"
           },
           comment
         },
         comment
       }|
       ## Choose the source of this mesh as an internally generated 2d rectangle.
       ##
       ## Boundary ids will be automatically assigned as:
       ##                          4 (top boundary)
       ##                        ----- 
       ##     (left boundary) 1 |     | 2 (right boundary)
       ##                        ----- 
       ##                          3 (bottom boundary)
       ## 
       ## No region ids will be assigned.   
       ##
       element source {
         attribute name { "Rectangle" },
         ## Location of lower left corner.
         ##
         ##      ----- 
         ##     |     | 
         ##      x---- 
         ##
         element lower_left {
           real_2_vector
         },
         ## Location of upper right corner.
         ##
         ##      ----x
         ##     |     | 
         ##      ----- 
         ##
         element upper_right {
           real_2_vector
         },
         ## Specify the number of cells in each dimension.
         element number_cells {
           integer_2_vector
         },
         ## Specify the direction in which the diagonal should lie.
         element diagonal {
           # a hard coded string_value
           element string_value {
             ( "left" | "right" | "right/left" | "left/right" | "crossed" )
           },
           comment
         },
         ## The ufl cell type (no option allowed).
         element cell {
           element string_value {
             "triangle"
           },
           comment
         },
         comment
       }|
       ## Choose the source of this mesh as an internally generated 3d cube of width, depth and height 1.
       ##
       ## Boundary ids will be automatically assigned as:
       ##                           ______
       ##                          /  4 (top boundary)
       ##                         /_____/ 2 (right boundary)
       ##                        |     |  | 6 (back boundary)
       ##     (left boundary) 1  |  5 (front boundary)
       ##                        |_____|/3 (bottom boundary)
       ##   
       ## No region ids will be assigned.   
       element source {
         attribute name { "UnitCube" },
         ## Specify the number of cells in each dimension.
         element number_cells {
           integer_3_vector
         },
         ## The ufl cell type (no option allowed).
         element cell {
           element string_value {
             "tetrahedron"
           },
           comment
         },
         comment
       }|
       ## Choose the source of this mesh as an internally generated 3d box.
       ##
       ## Boundary ids will be automatically assigned as:
       ##                           ______
       ##                          /  4 (top boundary)
       ##                         /_____/ 2 (right boundary)
       ##                        |     |  | 6 (back boundary)
       ##     (left boundary) 1  |  5 (front boundary)
       ##                        |_____|/3 (bottom boundary)
       ##   
       ## No region ids will be assigned.   
       element source {
         attribute name { "Box" },
         ## Location of lower back left corner.
         ##        ______
         ##       /     /|
         ##      /_____/ |
         ##     |      | |
         ##     |   x  | /
         ##     |______|/
         ##
         element lower_back_left {
           real_3_vector
         },
         ## Location of upper front right corner.
         ##        ______
         ##       /     /|
         ##      /____x/ |
         ##     |     |  |
         ##     |     | /
         ##     |_____|/
         ##
         element upper_front_right {
           real_3_vector
         },
         ## Specify the number of cells in each dimension.
         element number_cells {
           integer_3_vector
         },
         ## The ufl cell type (no option allowed).
         element cell {
           element string_value {
             "tetrahedron"
           },
           comment
         },
         comment
       }
     )
  )

