# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

include "spud_base.rnc"

system_ufl_symbol =
  (
    ## The ufl symbol that will be used in ufl forms and functionals to describe the system function. 
    ## This is the potentially mixed function made up of the fields defined in this system. This ufl
    ## symbol must be unique across the entire options file as it may be used in any ufl form or functional
    ## written in this file.
    ##
    ## Several additional symbols will be automatically derived from this base symbol:
    ## - trial (ansatz) function = symbol_a
    ##     (the trial basis function, to be used in linear and bilinear forms)
    ## - test function           = symbol_t
    ##     (the test basis function, to be used in bilinear forms)
    ## - iterated function       = symbol_i
    ##     (the iterated function coefficient, containing the most up to date values for the system function)
    ## - old function            = symbol_n
    ##     (the old function coefficient, containing the values from the previous timestep for the system function)
    ##
    element ufl_symbol {
      anystring
    }
  )

field_ufl_symbol =
  (
    ## The ufl symbol that will be used in ufl forms and functionals to describe the field. 
    ## This is the potentially sub function of the potentially mixed system function. This ufl
    ## symbol must be unique across the entire options file as it may be used in any ufl form or functional
    ## written in this file.
    ##
    ## Several additional symbols will be automatically derived from this base symbol:
    ## - trial (ansatz) function = symbol_a
    ##     (the trial basis function, to be used in linear and bilinear forms)
    ## - test function           = symbol_t
    ##     (the test basis function, to be used in bilinear forms)
    ## - iterated function       = symbol_i
    ##     (the iterated function coefficient, containing the most up to date values for the system function)
    ## - old function            = symbol_n
    ##     (the old function coefficient, containing the values from the previous timestep for the system function)
    ##
    element ufl_symbol {
      anystring
    }
  )

coeff_ufl_symbol =
  (
    ## The ufl symbol that will be used in ufl forms and functionals to describe the coefficient. 
    ## This ufl symbol must be unique across the entire options file as it may be used in any ufl form or functional
    ## written in this file.
    ##
    ## Several additional symbols will be automatically derived from this base symbol:
    ## - iterated function       = symbol_i
    ##     (the iterated function coefficient, containing the most up to date values for the system function)
    ## - old function            = symbol_n
    ##     (the old function coefficient, containing the values from the previous timestep for the system function)
    ##
    element ufl_symbol {
      anystring
    }
  )

form_ufl_symbol =
  (
    ## The ufl symbol used above to describe a form.  This need only be unique within this nonlinear_solver. 
    ## No additional symbols will be automatically generated based on this symbol.
    element ufl_symbol {
      anystring
    }
  )

functional_ufl_symbol =
  (
    ## The ufl symbol used above to describe a functional.  This need not be unique as it is only accessible
    ## from this description.  No additional symbols will be automatically generated based on this symbol.
    element ufl_symbol {
      anystring
    }
  )

# intended for coefficients outside of the systems
special_ufl_symbol =
  (
    ## The ufl symbol that will be used in ufl forms and functionals to describe the coefficient. 
    ## This ufl symbol must be unique across the entire options file as it may be used in any ufl form or functional
    ## written in this file.  No additional symbols will be augomatically generated based on this symbol.
    element ufl_symbol {
      anystring
    }
  )

quadrature_degree =
  (
    ## The quadrature degree that will be used to compute the form.
    ##
    ## If unselected ffc will automatically determine the degree for the form.
    element quadrature_degree {
      integer
    }?
  )

quadrature_rule =
  (
    (
      ## The quadrature rule that will be used when integrating the forms.
      ##
      ## The 'default' option covers hand implemented quadrature rules (in ffc) for triangles and tetrahedra with a degree of
      ## precision less than or equal to six.  Above this 'canonical' will automatically be used.
      ##
      ## The 'canonical' option relies on FIAT to compute the quadrature rule which is based on Gauss--Legendre--Jacobi rule mapped
      ## onto simplices.
      element quadrature_rule {
        attribute name { "default" },
        empty
      }|
      ## The quadrature rule that will be used when integrating the forms.
      ##
      ## The 'canonical' option relies on FIAT to compute the quadrature rule which is based on Gauss--Legendre--Jacobi rule mapped
      ## onto simplices.
      ##
      ## The 'default' option covers hand implemented quadrature rules (in ffc) for triangles and tetrahedra with a degree of
      ## precision less than or equal to six.  Above this 'canonical' will automatically be used.
      element quadrature_rule {
        attribute name { "canonical" },
        empty
      }
    )
  )

