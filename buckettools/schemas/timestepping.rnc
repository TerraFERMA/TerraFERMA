# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

include "spud_base.rnc"

timestepping =
   (
      ## Options for timestepping if this is a dynamic simulation (leave inactive for steady state simulations)
      element timestepping {
        ## The current time at the start of the simulation
        element current_time {
          real
        },
        (
          ## The time at which the simulation should stop
          element finish_time {
            real
          }|
          ## The number of timesteps after which the simulation should stop
          element number_timesteps {
            integer
          }
        ),
        ## Options for the timestep
        element timestep {
          ## Options describing a coefficient in this system
          element coefficient {
            attribute name { "Timestep" },
            special_ufl_symbol,
            ## The type of coefficient.
            ##
            ## Constants are spatially constant expressions.
            element type {
              attribute name { "Constant" },
              ## The rank of the coefficient (scalar, rank 0).
              element rank {
                attribute name { "Scalar" },
                timestep_constant_options,
                comment
              },
              comment
            },
            comment
          },
          ## Options to adapt the timestep based on a field in a system
          element adaptive {
            ## Provide the name of a field (and the system it is described in) and its target maximum value.
            ##
            ## This should be a Courant number like field so that the timestep is calculated such that:
            ##
            ## dt = (current_dt*requested_maximum_value)/current_maximum_value
            ##
            ## If multiple constraints are provided the minimum timestep is taken.
            element constraint {
              attribute name { xsd:string },
              ## The system name
              element system {
                attribute name { xsd:string },
                comment
              },
              (
                ## The field name
                ##
                ## Field is assumed to be Scalar.
                element field {
                  attribute name { xsd:string },
                  comment
                }|
                ## The coefficient name
                ##
                ## Coefficient is assumed to be Scalar.
                element coefficient {
                  attribute name { xsd:string },
                  comment
                }
              ),
              ## The target maximum value requested for the above field
              element requested_maximum_value {
                real
              },
              comment
            }+,
            (
              ## The period in simulation time at which the timestep is recalculated.
              ##
              ## Defaults to every timestep if not selected.
              element adapt_period {
                real
              }|
              ## The number of timesteps between recalculations of the optimal timestep.
              ##
              ## Defaults to 1 (every timestep) if not selected.
              element adapt_period_in_timesteps {
                integer
              }
            )?,
            ## The maximum ratio by which the timestep is allowed
            ## to increase in a timestep adapt. e.g., a value of
            ## 1.1 indicates that the timestep may be increased by
            ## at most 10%.
            element increase_tolerance {
              real
            }?,
            comment
          }?,
          comment
        },
        ## Check for a steady state by comparing the previous timestep's values
        ## to the most recent compared to the given tolerance in the given norm
        element steady_state {
          ## Tolerance in which to test for a steady state
          element tolerance {
            real
          },
          comment
        }?,
        comment
      }
   )

timestep_constant_options =
  (
    attribute rank { "0" },
    constant_timestep
  )

constant_timestep = 
  (
    ## Options for the description of an expression over the domain
    element value {
      attribute name {"WholeMesh"},
      prescribed_scalar_constant,
      comment
    }
  )

nonlinear =
   (
      ## Options to perform multiple iterations per timestep (i.e. to solve the systems repeatedly)
      element nonlinear_systems {
        ## The number of nonlinear iterations
        element nonlinear_iterations {
          integer
        },
        comment
      }
   )
