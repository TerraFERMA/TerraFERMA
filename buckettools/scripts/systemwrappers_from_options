#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

import sys
import libspud
import buckettools.spud
import os

import argparse
try:
  import argcomplete
except ImportError:
  pass

# Let's start by parsing the options
parser = argparse.ArgumentParser( \
                       description="""This script takes a buckettools options file and writes """ +
                       """ufl, ufc and cpp header files based on the solver, functional and expression options.  """ +
                       """It also provides a cpp header file wrapping the namespaces of the ufc """ +
                       """corresponding to these ufl files.""" )
parser.add_argument('filename', action='store', metavar='options_filename', type=str,
                    help='specify options filename')
parser.add_argument('-d', '--dry-run', action='store_const', required=False, default=False, dest='dry', const=True,
                    help='perform a dry run (use this in combination with -f/-l to see a list of files/libraries that would be generated/are needed)')
parser.add_argument('-f', '--list-cpp-files', metavar='filename', action='store', dest='listfiles', nargs='?', default=None, 
                    required=False, const='', 
                    help='output a list of cpp files generated by ffc to the given file (if not given output to stdout)')
parser.add_argument('-l', '--list-cpp-libraries', metavar='filename', action='store', dest='listcpplibs', nargs='?', default=None, 
                    required=False, const='', 
                    help='output a list of required cpp libraries to the given file (if not given output to stdout)')
try:
  argcomplete.autocomplete(parser)
except NameError:
  pass
args = parser.parse_args()

# the options file name
options_filename  = args.filename

# load the options tree
libspud.load_options(options_filename)

bucket = buckettools.spud.SpudBucket()
# populate the bucket based on the options file loaded above
bucket.fill()

stat = bucket.preprocess_checks()
if stat != 0:
  print("ERROR failed preprocessing checks!")
  sys.exit(1)

if not args.dry:
  # write out the ufl files described by the options tree and run ffc on them to produce ufc
  bucket.write_ufc()
  # write a cpp header file to wrap the namespaces of the corresponding ufc
  bucket.write_systemfunctionals_cpp()
  bucket.write_systemsolvers_cpp()

  # write out the cpp expression header files described by the options tree
  bucket.write_cppexpressions()
  # write a cpp header file to wrap the namespaces of the corresponding cpp
  bucket.write_systemexpressions_cpp()

if args.listfiles is not None:
  namespaces = bucket.list_namespaces()
  namespaces = [n+'.cpp' for n in namespaces]
  namespaces.sort()
  output = sys.stdout
  if args.listfiles != '': output = open(args.listfiles, 'w')
  for n in namespaces: output.write(n+os.linesep)
  if args.listfiles != '': output.close()

if args.listcpplibs is not None:
  cpplibraries = bucket.list_cpplibraries()
  cpplibraries.sort()
  output = sys.stdout
  if args.listcpplibs != '': output = open(args.listcpplibs, 'w')
  for lib in cpplibraries: output.write(lib+os.linesep)
  if args.listcpplibs != '': output.close()

# and we're done
sys.exit(0)

