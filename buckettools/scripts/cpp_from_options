#!/usr/bin/env python3

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
import sys
import libspud
import buckettools.spud

# Let's start by parsing the options
optparser=OptionParser(usage='usage: %prog <options-file>',
                       add_help_option=True,
                       description="""This script takes a buckettools options file and writes """ +
                       """ufl files based on the nonlinear_solver and diagnostic functional options.  """ +
                       """It also provides a cpp header file wrapping the namespaces of the ufc """ +
                       """corresponding to these ufl files.""" )

(options, argv) = optparser.parse_args()

if len(argv)<1:
    optparser.print_help()
    sys.exit(1)

# the options file name
options_filename  = argv[0]

# load the options tree
libspud.load_options(options_filename)

bucket = buckettools.spud.SpudBucket()
# populate the bucket based on the options file loaded above
bucket.fill()
# write out the cpp expression header files described by the options tree
bucket.write_cppexpressions()
# write a cpp header file to wrap the namespaces of the corresponding ufc
bucket.write_systemexpressions_cpp()

# and we're done

