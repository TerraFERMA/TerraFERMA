#!/usr/bin/env python

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

import glob
import os
import sys
import argparse
import string
import shutil
from lxml import etree
import buckettools.base as base
import re

parser = argparse.ArgumentParser( \
                       description="""Updates tfml files so they pass validation.""")
parser.add_argument('file', action='store', metavar='file', type=str, nargs='+',
                    help='specify a filename or expression')
parser.add_argument('-r', '--recursive', metavar='depth', action='store', type=int, dest='recurse', nargs='?', default=None, 
                    required=False, const=-1,
                    help='recursively search the directory tree for files (if no depth is specified full recursion will be used)')
args = parser.parse_args()

filenames = []
for f in args.file:
  
  if args.recurse is None:
    for filename in glob.glob(f):
      ext = filename.split('.')[-1]
      if ext == "tfml":
        filenames.append(os.path.join(os.curdir, filename))
      else:
        print "Don't know how to deal with extension "+ext+".  Only know about tfmls."
        sys.exit(1)
  else:
    
    if os.path.isabs(f):
      dirname = os.path.dirname(f)
    else:
      dirname = os.curdir
    dirname = os.path.normpath(dirname)
  
    for root, dirnames, files in os.walk(dirname, topdown=True):
      depth = string.count(root, os.path.sep)
      for filename in glob.glob1(os.path.join(root, os.path.dirname(f)), os.path.split(f)[-1]):
        ext = filename.split('.')[-1]
        if ext == "tfml":
          filenames.append(os.path.join(os.path.join(root, os.path.dirname(f)), filename))
        else:
          print "Don't know how to deal with extension "+ext+".  Only know about tfmls."
          sys.exit(1)
      if depth == args.recurse:
        dirnames[:] = []

def update_ufl_symbol_name(path):
  global changed
  elements = tree.findall(path)
  if len(elements) != 0:
    for element in elements:
      if "name" not in element.attrib:
        parenttag = element.getparent().tag
        if parenttag in ["system", "field", "coefficient"]:
          element.attrib["name"] = "global"
        elif parenttag in ["form"]:
          element.attrib["name"] = "solver"
        elif parenttag in ["functional"]:
          element.attrib["name"] = "functional"
        else:
          print 'ERROR: Unknown parent tag, cannot update.'
          sys.exit(1)
        changed = True

def update_solve_location():
  global changed
  elements = tree.findall("//system/solve")
  if len(elements) != 0:
    for element in elements:
      solvers = element.getparent().findall("nonlinear_solver")
      for solver in solvers:
        child = etree.SubElement(solver, "solve", attrib={"name":element.attrib["name"]})
      element.getparent().remove(element)
    changed = True

def update_functional_location():
  global changed
  elements = tree.findall("//include_in_statistics/functional")
  if len(elements) != 0:
    for element in elements:
      function = element.getparent().getparent().getparent()
      system   = function.getparent()
      element.attrib["name"] = function.attrib["name"]+element.attrib["name"]
      stats = etree.SubElement(element, "include_in_statistics")
      system.append(element)
    changed = True

def update_quadrature_elements():
  global changed

  elements = tree.findall("//element")
  quad_elements = {}
  # loop over all elements in the tfml
  for element in elements:
    if element.find("family/string_value").text == "Quadrature":
      # select the symbol and degree of the Quadrature elements
      symbol = element.getparent().getparent().getparent().find("ufl_symbol/string_value").text
      degree = element.find("degree/integer_value").text
      quad_elements[symbol] = {"degree": degree, "element": element, "solvers": []}
      # store data and include a list for the solvers that use this symbol

  # get the global parameters
  global_parameters = tree.find("//global_parameters/ufl/string_value")
  if global_parameters is not None: 
    global_parameters = global_parameters.text
  else:
    global_parameters = ""

  # get all the nonlinear_solvers (don't care what type)
  solvers = {solver:[] for solver in tree.findall("//nonlinear_solver/type")}
  # loop over the solvers
  for solver, elements in solvers.iteritems():
    # build up all the ufl text
    preamble = solver.find("preamble/string_value")
    # NOTE: this logic is not perfect... it assumes that if a ufl_symbol appears anywhere (including in global parameters) then it
    # must be used in the solver - this isn't actually necessarily true!
    ufl_text = global_parameters
    if preamble is not None: ufl_text += os.linesep+preamble.text
    forms = solver.findall("form/string_value")
    for form in forms: ufl_text += os.linesep+form.text
    # extract the ufl symbols from the ufl - also not foolproof
    solver_symbols = [symbol for line in ufl_text.split(os.linesep) \
                             if not line.lstrip().startswith("#") \
                             for symbol in re.findall(r"\b\w+?\b", line, re.I) 
                             if symbol not in base.ufl_reserved()]
    for symbol, element in quad_elements.iteritems():
      # check if any of the symbols using quadrature functions (including derivatives of the base ufl symbol)
      for suffix in base.function_uflsymbol_suffixes():
        if symbol+suffix in solver_symbols:
          # build a map from the solver -> element and from the element -> solver
          elements.append(element)
          element["solvers"].append(solver)
 
  def solver_name(solver, rule=False): 
    name = solver.getparent().getparent().attrib["name"]+"::"+\
           solver.getparent().attrib["name"]
    if rule: name+="(rule="+solver.find("quadrature_rule").attrib["name"]+")"
    return name

  def function_name(element, degree=False):
     name = element["element"].getparent().getparent().getparent().getparent().attrib["name"]\
            +"::"+element["element"].getparent().getparent().getparent().attrib["name"]
     if degree: name+="(degree="+element["degree"]+")"
     return name

  functions_changed = []
  # loop over all the quadrature elements giving them a quadrature_rule (if they don't already have one) based on their solvers
  for element in quad_elements.itervalues():
    if element["element"].find("quadrature_rule") is None:
      solver_quad_rules = [solver.find("quadrature_rule").attrib["name"] for solver in element["solvers"]]
      quad_rule = solver_quad_rules[0]
      if len(solver_quad_rules) == 0: 
        print "WARNING: no solvers found using %s, applying \"default\" quadrature rule."%(quad_rule, function_name(element))
        quad_rule = "default"
      if len(set(solver_quad_rules)) != 1:  # check for non-matching entries
        print "WARNING: multiple quadrature_rules used in solvers. Applying %s to %s,"%(quad_rule, function_name(element))
        print "         which is used in solvers: "+\
              (os.linesep+"                                   ").join([solver_name(solver,True) for solver in element["solvers"]])
        functions_changed.append(function_name(element))
      rule = etree.SubElement(element["element"], "quadrature_rule", attrib={"name": quad_rule})
      changed = True

  solvers_changed = []
  # loop over all the solvers giving them quadrature_degrees (if they don't already have one) based on their Quadrature elements
  for solver, elements in solvers.iteritems():
    if solver.find("quadrature_degree") is None:
      quad_degrees = [element["degree"] for element in elements]
      if len(quad_degrees) == 0: continue  # can happen and it's fine
      if len(set(quad_degrees)) != 1:
        print "WARNING: multiple quadrature degrees used in functions referenced by solver %s, not applying any restriction."%(solver_name(solver),)
        print "         Functions referenced: "+\
              (os.linesep+"                               ").join([function_name(element, True)])
        solvers_changed.append(solver_name(solver))
        continue
      degree = etree.SubElement(solver, "quadrature_degree")
      degree_value = etree.SubElement(degree, "integer_value", attrib={"rank":"0"})
      degree_value.text = quad_degrees[0]
      changed = True

  if len(functions_changed) > 0:
    print "Summary: Changing the quadrature_rule in the functions: "+\
          (os.linesep+"                                                        ").join(functions_changed)
    print "         These changes may not be backwards compatible (or work!)."
    print "         Check these changes to your input and, if it builds and runs, your output carefully."
  if len(solvers_changed) > 0:
    print "WARNING: Changing the quadrature_degree in the solvers: "+\
          (os.linesep+"                                                        ").join(solvers_changed)
    print "         These changes may not be necessary or backwards compatible (or work!)."
    print "         Check these changes to your input and, if it builds and runs, your output carefully."


for filename in filenames:
  print 'Updating: '+filename
  tree = etree.parse(filename)
  global changed
  changed = False
  update_ufl_symbol_name("//ufl_symbol")
  update_solve_location()
  update_functional_location()
  update_quadrature_elements()
  if changed:
    backupfilename = os.path.join(os.path.split(filename)[0], os.path.split(filename)[-1].split('.')[0]+'.tfml.bak')
    shutil.copy2(filename, backupfilename)
    tree.write(filename, encoding='utf-8', xml_declaration=True)

