#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.


import argparse
try:
  import argcomplete
except ImportError:
  pass
from copy import copy
import dolfin
import sys
import subprocess
import numpy
import os
from buckettools.mesh import extract_submesh

if __name__ == "__main__":
  parser = argparse.ArgumentParser( \
                         description="""This takes a dolfin .xdmf mesh file """ +\
                         """and extracts the submesh with the given region id(s).""")
  parser.add_argument('filename', metavar='filename', type=str,
                      help='specify the name of the dolfin .xdmf file')
  parser.add_argument('-r', '--regionids', action='store', metavar='region_id', dest='regionids', type=int, nargs='+', required=True,
                      help='specify the region ids where the submesh is to be extracted')
  parser.add_argument('-o', '--outputfilename', action='store', metavar='filename', dest='outputfilename', type=str, default=True, required=False,
                      help='specify the output filename (defaults to the input filename_submesh)')
  try:
    argcomplete.autocomplete(parser)
  except NameError:
    pass
  args = parser.parse_args()

  extract_submesh(args.filename, args.regionids, writefile=args.outputfilename)

