#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.


import argparse
try:
  import argcomplete
except ImportError:
  pass
from copy import copy
import dolfin
import sys
import subprocess
import numpy
import os

parser = argparse.ArgumentParser( \
                       description="""This takes a dolfin .xdmf mesh file """ +\
                       """and extracts the submesh with the given region id(s).""")
parser.add_argument('filename', metavar='filename', type=str,
                    help='specify the name of the dolfin .xdmf file')
parser.add_argument('-r', '--regionids', action='store', metavar='split_ids', dest='regionids', type=int, nargs='+', required=True,
                    help='specify the region ids where the submesh is to be extracted')
parser.add_argument('-o', '--outputfilename', action='store', metavar='filename', dest='outputfilename', type=str, default=None, required=False,
                    help='specify the output filename (defaults to the input filename_submesh)')
try:
  argcomplete.autocomplete(parser)
except NameError:
  pass
args = parser.parse_args()

# organize the filename
fullname = args.filename
basename, extension = os.path.splitext(fullname)

outfullname = args.outputfilename
if outfullname is None: outfullname = basename+"_submesh"+extension
outbasename, outextension = os.path.splitext(outfullname)

# check that the filename ends with the right format
if extension!=".xdmf" or outextension!=".xdmf":
    sys.stderr.write("Input and output mesh filenames must end in .xdmf.\n")
    parser.print_help()
    sys.exit(1)

# read in the mesh
mesh = dolfin.Mesh()
dolfin.XDMFFile(dolfin.MPI.comm_world, fullname).read(mesh)

D = mesh.topology().dim()
md = mesh.domains()

cellfunc = dolfin.MeshFunction("size_t", mesh, D, 0)
dolfin.XDMFFile(dolfin.MPI.comm_world, basename+"_cell_ids"+extension).read(cellfunc)
for cell in dolfin.cells(mesh): md.set_marker((cell.index(), cellfunc[cell.index()]), D)

facetmvc = dolfin.MeshValueCollection("size_t", mesh, D-1)
dolfin.XDMFFile(dolfin.MPI.comm_world, basename+"_facet_ids"+extension).read(facetmvc)
facetfunc = dolfin.MeshFunction("size_t", mesh, facetmvc)
for facet in dolfin.facets(mesh): md.set_marker((facet.index(), facetfunc[facet.index()]), D-1)

submesh = dolfin.SubMesh(mesh, args.regionids)
submd = submesh.domains()

subcellfunc = dolfin.MeshFunction("size_t", submesh, D, submd)
subcellmvc = dolfin.MeshValueCollection("size_t", subcellfunc)
subcellmvc.rename("cell_ids", "cell_ids")

subfacetfunc = dolfin.MeshFunction("size_t", submesh, D-1, submd)
subfacetmvc = dolfin.MeshValueCollection("size_t", subfacetfunc)
subfacetmvc.rename("facet_ids", "facet_ids")

dolfin.XDMFFile(dolfin.MPI.comm_world, outfullname).write(submesh)
dolfin.XDMFFile(dolfin.MPI.comm_world, outbasename+"_cell_ids"+extension).write(subcellmvc)
dolfin.XDMFFile(dolfin.MPI.comm_world, outbasename+"_facet_ids"+extension).write(subfacetmvc)

