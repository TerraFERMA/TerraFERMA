#!/usr/bin/env python

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

import glob
import os
import sys
import argparse
import shutil
from lxml import etree
import copy
import subprocess
import tempfile

parser = argparse.ArgumentParser( \
                       description="""Updates shml files so they pass validation.""")
parser.add_argument('file', action='store', metavar='file', type=str, nargs='+',
                    help='specify a filename or expression')
parser.add_argument('-r', '--recursive', metavar='depth', action='store', type=int, dest='recurse', nargs='?', default=None, 
                    required=False, const=-1,
                    help='recursively search the directory tree for files (if no depth is specified full recursion will be used)')
args = parser.parse_args()

filenames = []
for f in args.file:
  
  if args.recurse is None:
    for filename in glob.glob(f):
      ext = filename.split('.')[-1]
      if ext == "shml":
        filenames.append(os.path.join(os.curdir, filename))
      else:
        print("Don't know how to deal with extension "+ext+".  Only know about shmls.")
        sys.exit(1)
  else:
    
    if os.path.isabs(f):
      dirname = os.path.dirname(f)
    else:
      dirname = os.curdir
    dirname = os.path.normpath(dirname)
  
    for root, dirnames, files in os.walk(dirname, topdown=True):
      depth = root.count(os.path.sep)
      for filename in glob.glob1(os.path.join(root, os.path.dirname(f)), os.path.split(f)[-1]):
        ext = filename.split('.')[-1]
        if ext == "shml":
          filenames.append(os.path.join(os.path.join(root, os.path.dirname(f)), filename))
        else:
          print("Don't know how to deal with extension "+ext+".  Only know about shmls.")
          sys.exit(1)
      if depth == args.recurse:
        dirnames[:] = []

def update_string_value(path):
  global changed
  elements = tree.findall(path)
  if len(elements) is not 0:
    for element in elements:
      if element.find("string_value") is None:
        text = element.text
        element.text = None
        child = etree.SubElement(element, "string_value", attrib={"lines":"1"})
        child.text = text
        changed = True

def update_functional_names(path):
  global changed
  # grab any variables or tests that the user might have extracted data from the stat or steady state files in
  elements = tree.findall("//simulation/variables/variable/string_value")+tree.findall("/tests/test/string_value")
  # the extensions of files we're looking for and the acceptable values of their keys
  extensions = [['.stat', ['max', 'min', 'functional_value'], 'functional_value'], \
                ['.steady', ['change(', 'functional_change'], 'functional_change']]
  # first work out the output_base_names of the all the tfmls referenced by this shml
  tfmls = tree.findall("//simulation/input_file/string_value")
  tfmlnames = [tfml.text for tfml in tfmls]
  basenames = []
  for tfmlname in tfmlnames:
    try:
      tfmltree = etree.parse(os.path.join(path, tfmlname))
      basename = tfmltree.find("/io/output_base_name/string_value").text
    # try to deal with tfml files that aren't there - hopefully they're all checkpoints and follow standard naming conventions
    except IOError:
      checkpoint_count = tfmlname.count('_checkpoint')
      basetfmlname = tfmlname.replace('_checkpoint', '')
      try:
        checkpoint_number = int(basetfmlname.split('_')[-1].split('.')[0])
        basetfmlname = basetfmlname.replace('_'+repr(checkpoint_number), '')
      except ValueError:
        pass
      i = tfmlnames.index(basetfmlname)
      tfmltree = etree.parse(os.path.join(path, tfmlnames[i]))
      basename = tfmltree.find("/io/output_base_name/string_value").text
      basename += '_checkpoint'*checkpoint_count
    basenames.append(basename)
  # loop over all the variables and tests
  for element in elements:
    lines = element.text.splitlines()
    ebasenames = copy.deepcopy(basenames)
    for line in lines:
      if "/io/output_base_name" in line:
        basenamev = line.split("=")[0].strip()
        basenamev += '+"'
        ebasenames.append(basenamev)
    # loop over the possible output base names
    for basename in ebasenames:
      for ext in extensions:
        state = 0
        vname = '__uninitialized_variable_name__'
        for i, line in enumerate(lines):
          if state == 0:
            if basename+ext[0] in line:
              vname = line.split("=")[0].strip()
              state = 1
              continue
          if state == 1:
            if vname+'[' in line:
              sline = line[line.find(vname+'['):].split('[')
              if len(sline) > 3 and sline[3].startswith('"') and not any([sline[3].startswith('"'+s) for s in ext[1]]):
                oldfunctionalname = sline[3].strip('"]')
                oldfunctionname = sline[2].strip('"]')
                if sline[2].startswith('"') and sline[2].endswith('"]'):
                  newfunctionalname = oldfunctionname+oldfunctionalname
                else:
                  newfunctionalname = oldfunctionname+'+"'+oldfunctionalname+'"'
                sline[3] = sline[3].replace(oldfunctionalname, ext[2])
                sline[2] = sline[2].replace(oldfunctionname, newfunctionalname)
                lines[i] = line.replace(line[line.find(vname+'['):], '['.join(sline))
                changed = True
                continue
    element.text = "\n".join(lines)

def update_python3():
  global changed
  # search for all python code strings
  elements = tree.xpath('//string_value[@type="code" and @language="python"]')
  if len(elements) != 0:
    changed = True
    for element in elements:
      # open a temporary file that line buffers with .py suffix called tf
      # once this closes it will be automatically deleted
      with tempfile.NamedTemporaryFile(mode='w', buffering=1, suffix='.py') as tf:
        # write code string to file and add a linesep to clear buffer
        tf.file.write(element.text+os.linesep)
        # try calling 2to3 (NOTE assuming 2to3-2.7 is valid here across platforms!)
        command = ["2to3-2.7", "-W", "-n", "--add-suffix=3", "-o", os.path.dirname(tf.name), tf.name]
        try:
          p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        except Exception as exc:
          # give warning if setting up command failed (e.g. command not found)
          print("  WARNING: %s raised an exception before python3 conversion:"%(os.path.split(command[0])[-1]))
          print("           %s"%str(exc))
          print("           using command: %s"%(" ".join(command)))
          print("           python3 conversion will be skipped for this element!")
        else:
          # wait for command to finish
          retcode = p.wait()
          if retcode:
            # it failed... issue warning and as much info as we have
            print("  WARNING: during python3 conversion %s returned: %d"%(os.path.split(command[0])[-1], retcode))
            for line in iter(p.stdout.readline, b''):
              print("             "+line.decode())
            print("           using command: %s"%(" ".join(command)))
            print("           python3 conversion will be skipped for this element!")
          else:
            # success (or at least we think so), proceed with rewriting element text and attributes
            tf3 = open(tf.name+'3', 'r')
            element.text = tf3.read()
            tf3.close()
            os.remove(tf3.name)
            element.attrib['language'] = 'python3'

for filename in filenames:
  print('Updating: '+filename)
  tree = etree.parse(filename)
  global changed
  changed = False
  update_string_value("/owner")
  update_string_value("/description")
  update_string_value("//parameter/values")
  update_string_value("//run/commands/command")
  update_functional_names(os.path.split(filename)[0])
  update_python3()
  if changed:
    backupfilename = os.path.join(os.path.split(filename)[0], os.path.split(filename)[-1].split('.')[0]+'.shml.bak')
    shutil.copy2(filename, backupfilename)
    tree.write(filename, encoding='utf-8', xml_declaration=True)
    

