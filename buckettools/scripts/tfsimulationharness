#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

def filter_simulations(simulation, length=[], parallelism="any", owner=[], tags=[], exclude=[]):
  import libspud
  libspud.load_options(simulation)
  llength = libspud.get_option("/length").split("\n")[0]
  lowner  = libspud.get_option("/owner").split("\n")[0]
  try:
    ltags = libspud.get_option("/tags").split( )
  except libspud.SpudKeyError:
    ltags = []
  try:
    lnprocs = libspud.get_option("/number_processors")
  except libspud.SpudKeyError:
    lnprocs = 1
  libspud.clear_options()
  
            # any parallelism is allowed or only parallel or only serial
  include = (((parallelism=="any") or (parallelism=="parallel" and lnprocs>1) or (parallelism=="serial" and lnprocs==1)) and \
            # no length restrictions or the length is in the list
            (len(length)==0 or llength in length) and \
            # no owner restrictions or the simulation owner is in the list 
            (len(owner)==0 or lowner in owner) and \
            # no tag restrictions or at least one of the simulation tags has to be in tags 
            (len(tags)==0 or any([l in tags for l in ltags])) and \
            # no exclude tag restrictions or none of the simulation tags is in exclude tags
            (len(exclude)==0 or not any([l in exclude for l in ltags])))

  return include

if __name__ == "__main__":
  import os
  import glob
  import sys
  import functools
  import string

  import argparse
  try:
    import argcomplete
  except ImportError:
    pass
  parser = argparse.ArgumentParser( \
                         description="""Run simulations and manipulate the output data.""")
  parser.add_argument('filename', action='store', metavar='filename', type=str, nargs='+',
                      help='specify filename(s)')
  parser.add_argument('-n', '--nthreads', action='store', type=int, dest='nthreads', required=False, default=1, 
                      help='number of threads')
  parser.add_argument('-r', '--recursive', metavar='depth', action='store', type=int, dest='recurse', nargs='?', default=None, 
                      required=False, const=-1, 
                      help='recursively search the directory tree for files (if no depth is specified full recursion will be used)')
  parser.add_argument("-l", "--length", action='store', metavar='length', default=[], nargs='+', 
                      help="length(s) of problem (if unspecified will run all lengths)")
  parser.add_argument("-p", "--parallelism", action='store', metavar='parallelism', type=str, default='any', 
                      help="parallelism of problem: options are serial, parallel or any (default=any)")
  parser.add_argument("-o", "--owner", action='store', metavar='ownerid', default=[], nargs='+', 
                      help="run only tests that have specific owner ids (if unspecified will include all owners)")
  parser.add_argument("-t", "--tags", action='store', metavar='tag', default=[], nargs='+', 
                      help="run only tests that have specific tags (if unspecified will run all tags)")
  parser.add_argument("-e", "--exclude", action='store', metavar='tag', default=[], nargs='+', 
                      help="run only tests that do not have specific tags (takes precidence over -t, if unspecified will not exclude any tags)")
  parser.add_argument("--generate", action='store_const', dest='generate', const=True, default=False, required=False,
                      help="generate the simulation directories and input")
  parser.add_argument("--configure", action='store_const', dest='configure', const=True, default=False, required=False,
                      help="configure the simulations")
  parser.add_argument("--build", action='store_const', dest='build', const=True, default=False, required=False,
                      help="build the simulations")
  parser.add_argument("--run", action='store_const', dest='run', const=True, default=False, required=False,
                      help="run the simulations")
  parser.add_argument("--test", action='store_const', dest='test', const=True, default=False, required=False,
                      help="test the simulations")
  parser.add_argument("--just-test", action='store_const', dest='justtest', const=True, default=False, required=False,
                      help="only test the current output of the simulations (do not rerun)")
  parser.add_argument("--just-list", action='store_const', dest='justlist', const=True, default=False, required=False,
                      help="only list the simulations")
  parser.add_argument("--list-input", action='store_const', dest='listinput', const=True, default=False, required=False,
                      help="list the input to the simulations")
  parser.add_argument("--clean", action='store_const', dest='clean', const=True, default=False, required=False,
                      help="removes the run (and build) directories from previous simulation runs")
  parser.add_argument('-f', '--force', action='store_const', dest='force', const=True, default=False, 
                      required=False,
                      help='force rebuild(s)')
  try:
    argcomplete.autocomplete(parser)
  except NameError:
    pass
  args = parser.parse_args()

  filenames = set()
  for f in args.filename:
    
    if os.path.isabs(f):
      ffull = os.path.normpath(f)
    else:
      ffull = os.path.normpath(os.path.join(os.getcwd(), f))

    if args.recurse is None:

      for filename in glob.glob(ffull):
        ext = filename.split('.')[-1]
        if ext == "shml":
          filenames.add(filename)
        else:
          print "Don't know how to deal with extension "+ext+".  Only know about shmls."
          sys.exit(1)

    else:
      
      for dirname, dirnames, files in os.walk(os.path.dirname(ffull), topdown=True):
        depth = string.count(dirname, os.path.sep) - string.count(os.path.dirname(ffull), os.path.sep)
        for filename in glob.glob1(os.path.join(dirname, os.path.dirname(f)), os.path.split(f)[-1]):
          ext = filename.split('.')[-1]
          if ext == "shml":
            filenames.add(os.path.join(os.path.join(dirname, os.path.dirname(f)), filename))
          else:
            print "Don't know how to deal with extension "+ext+".  Only know about shmls."
            sys.exit(1)
        if depth == args.recurse:
          dirnames[:] = []

  if len(filenames)==0:
    print "No matching files found."
    sys.exit(1)

  partial_filter_simulations = functools.partial(filter_simulations, 
                                                 length=args.length, parallelism=args.parallelism, 
                                                 owner=args.owner, tags=args.tags, exclude=args.exclude)
  filenames = filter(partial_filter_simulations, filenames)

  curdir = os.getcwd()

  try:
    import buckettools.simulations as simulations
  except ImportError:
    print "Error while importing simulations.  PYTHONPATH set correctly?"
    sys.exit(1)

  try:
    batch = simulations.SimulationHarnessBatch(filenames, os.path.realpath(__file__), curdir, \
                                               os.environ["TF_CMAKE_PATH"], nthreads=args.nthreads)
  except simulations.SimulationsErrorInitialization:
    print "Error while initializing the simulations."
    sys.exit(1)

  if args.clean:
    try:
      batch.clean()
    except:
      print "Error while cleaning simulations, exiting with error."
      sys.exit(1)

  if args.listinput:
    inputlist = batch.listinput()
    inputlist += filenames
    for requiredinput in inputlist:
      print os.path.relpath(requiredinput, curdir)

  if args.justlist:
    for filename in filenames:
      print os.path.relpath(filename, curdir)
  elif args.generate or args.configure or args.build or args.run or args.test:
    try:
      batch.writeoptions()
    except simulations.SimulationsErrorWriteOptions:
      print "Error while writing options, exiting with error."
      sys.exit(1)
    if args.configure or args.build or args.run or args.test:
      try:
        batch.configure(force=args.force)
      except simulations.SimulationsErrorConfigure:
        print "Error while configuring simulations, exiting with error."
        sys.exit(1)
      if args.build or args.run or args.test:
        try: 
          batch.build(force=args.force)
        except simulations.SimulationsErrorBuild:
          print "Error while building simulations, exiting with error."
          sys.exit(1)
        if args.run or args.test:
          try:
            batch.run(force=args.force)
          except (simulations.SimulationsErrorRun, simulations.SimulationsErrorWriteOptions, \
                  simulations.SimulationsErrorConfigure, simulations.SimulationsErrorBuild):
            print "Error while running simulations, exiting with error."
            sys.exit(1)
          if args.test:
            try:
              batch.test(force=args.force)
            except simulations.SimulationsErrorVariable:
              print "Error while assigning variables, exiting with error."
              sys.exit(1)
            except simulations.SimulationsErrorTest:
              print "Error while testing simulations, exiting with error."
              sys.exit(1)
  elif args.justtest:
    try:
      batch.test(force=args.force)
    except simulations.SimulationsErrorVariable:
      print "Error while assigning variables, exiting with error."
      sys.exit(1)
    except simulations.SimulationsErrorTest:
      print "Error while testing simulations, exiting with error."
      sys.exit(1)

