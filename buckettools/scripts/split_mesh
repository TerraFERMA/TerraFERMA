#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.


import argparse
try:
  import argcomplete
except ImportError:
  pass
from copy import copy
import dolfin
import numpy
from buckettools.mesh import splitmesh
import sys
import subprocess
import functools
import os

parser = argparse.ArgumentParser( \
                       description="""This takes a dolfin .xdmf mesh file """ +\
                       """and splits it along the given list of facet region """ + \
                       """id(s).  Produces a mesh in a file with the base name appended by _split.""")
parser.add_argument('filename', metavar='filename', type=str,
                    help='specify the name of the dolfin .xdmf file')
parser.add_argument('-s', '--split', action='store', metavar='split_ids', dest='split', type=int, nargs='+', required=True,
                    help='specify the facet ids that are to be split')
parser.add_argument('-n', '--newids', action='store', metavar='new_ids', dest='newids', type=int, nargs='+', default=None,
                    help='specify the new facet ids for the split facets specified using -s - '+
                         'if provided it must be the same length as the specified split ids, if left unspecified the new ids '+
                         'will be the same as the old ids multiplied by 100')
parser.add_argument('-c', '--centroid_function', action='store', metavar='centroid_func', dest='centroid_func', type=str, required=True,
                    help='name of file that contains a the definition of a python centroid_function(centroid) function '+
                         'which returns a boolean indicating if the cell with that centroid contains a split facet '+
                         '(returns True) or the original facet (returns False)')
parser.add_argument('-p', '--preserve', action='store', metavar='preserve_ids', dest='preserve', type=int, nargs='+', default=[],
                    help='specify the facet ids that are to be preserved - '+
                         'vertices connected to these facets will not be split even if they also belong to facets specified by -s')
parser.add_argument("--kwargs", action='store', metavar='name value', default=None, nargs='+', required=False, dest='kwargs', type=str,
                    help='optional keyword arguments to the centroid_function (note these will be strings so should '+
                         'be handled appropriately in the function)')
try:
  argcomplete.autocomplete(parser)
except NameError:
  pass
args = parser.parse_args()

if args.newids is not None:
  assert(len(args.split)==len(args.newids))

# organize the filename
fullname = args.filename
basename, extension = os.path.splitext(fullname)

# check that the filename ends with the right format
if extension!=".xdmf":
    sys.stderr.write("Mesh filename must end in .xdmf.\n")
    parser.print_help()
    sys.exit(1)

kwargs = {}
if args.kwargs is not None:
  for i in range(0, len(args.kwargs), 2):
    if args.kwargs[i] in kwargs:
      if type(kwargs[args.kwargs[i]]) is not list:
        kwargs[args.kwargs[i]] = [kwargs[args.kwargs[i]]]
      kwargs[args.kwargs[i]].append(args.kwargs[i+1])
    else:
      kwargs[args.kwargs[i]] = args.kwargs[i+1]

exec(open(args.centroid_func).read())
partial_centroid_function = functools.partial(centroid_function, **kwargs)

# and the split facet ids
split_facet_ids = args.split
new_facet_ids = args.newids
preserve_facet_ids = args.preserve

# read in the mesh
mesh = dolfin.Mesh()
dolfin.XDMFFile(dolfin.MPI.comm_world, fullname).read(mesh)
mesh.init()
D = mesh.topology().dim()

facetmvc = dolfin.MeshValueCollection("size_t", mesh, D-1)
dolfin.XDMFFile(dolfin.MPI.comm_world, basename+"_facet_ids"+extension).read(facetmvc, "facet_ids")
facetfunc = dolfin.MeshFunction("size_t", mesh, facetmvc)

split_mesh, split_facetfunc = splitmesh(mesh, facetfunc, split_facet_ids, partial_centroid_function, preserve_facet_ids=preserve_facet_ids, new_facet_ids=new_facet_ids)

outbasename = basename+"_split"

dolfin.XDMFFile(dolfin.MPI.comm_world, outbasename+extension).write(split_mesh)

cellfunc = dolfin.MeshFunction("size_t", mesh, D, 0)
dolfin.XDMFFile(dolfin.MPI.comm_world, basename+"_cell_ids"+extension).read(cellfunc)
split_cellfunc = dolfin.MeshFunction("size_t", split_mesh, D, 0)
for c in dolfin.cells(mesh): split_cellfunc[c.index()] = cellfunc[c.index()]
split_cellmvc = dolfin.MeshValueCollection("size_t", split_cellfunc)
split_cellmvc.rename("cell_ids", "cell_ids")
dolfin.XDMFFile(dolfin.MPI.comm_world, outbasename+"_cell_ids"+extension).write(split_cellmvc)

split_facetmvc = dolfin.MeshValueCollection("size_t", split_facetfunc)
split_facetmvc.rename("facet_ids", "facet_ids")
dolfin.XDMFFile(dolfin.MPI.comm_world, outbasename+"_facet_ids"+extension).write(split_facetmvc)

