#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

# utility script for building TerraFERMA models

import os
import sys
import subprocess
import shutil
from optparse import OptionParser


def chdir(dirname):
  try:
    os.chdir(dirname)
  except OSError:
    raise Exception("ERROR no such directory "+dirname+".")

def getExtraCmakeOptions(args):
    """
    get extra -D options for cmake from the command line or the environment variable TF_CMAKE_EXTRA_DARGS
    """
    # get options from command line
    cmake_options = args.extra_Doptions

    # get options from environment variable
    env_options = os.getenv('TF_CMAKE_EXTRA_DARGS')
    if env_options is not None:
      cmake_options += env_options.split()

    return cmake_options
        
if __name__ == "__main__":
    """
    Configure a build for a TerraFERMA project: defaults to out of tree build unless -d .
    """

    import argparse
    try:
      import argcomplete
    except ImportError:
      pass

    parser = argparse.ArgumentParser( \
                           description="""Configure a TerraFERMA simulation using cmake.""")
    parser.add_argument('filename', action='store', metavar='filename', type=str,
                        help='specify tfml filename')
    parser.add_argument('-a', '--auxiliary_files', action='store', metavar='filename', dest='auxfiles', 
                        required=False, default=[], nargs='+', 
                        help='auxiliary files that should be linked in build directory')
    parser.add_argument('-d', '--build_dir', action='store', metavar='directory', dest='build_dir', 
                        type=str, required=False, default='build', 
                        help='out of tree build directory')
    parser.add_argument('-e', '--executable_name', action='store', metavar='executable', dest='executable', 
                        type=str, required=False, default=None, 
                        help='alternate name of executable, defaults to filename')
    parser.add_argument('-D', '--extra_Doptions', action='store', metavar='-Doption', dest='extra_Doptions', 
                        required=False, default=[], nargs='+', 
                        help='provide extra options to CMake (these can also be set using the TF_CMAKE_EXTRA_DARGS environment
variable)')
    parser.add_argument('-i', '--interactive', action='store_const', dest='interactive', const=True, default=False, 
                        required=False,
                        help='use ccmake for interactive ccmake build (defaults to cmake)')
    try:
      argcomplete.autocomplete(parser)
    except NameError:
      pass
    args = parser.parse_args()

    # check for legal tfml filename
    if (not os.path.splitext(args.filename)[-1] == '.tfml'):
        print 'Error:  invalid filename.tfml'
        parser.print_help()
        sys.exit()

        
    tfmlfile = os.path.abspath(args.filename)
    build_dir = os.path.abspath(args.build_dir)
    interactive = args.interactive
    executable = args.executable
    auxfiles = args.auxfiles
    curdir = os.getcwd()

    # check if in tree or out of tree build
    if build_dir == curdir:
      out_of_tree_build = False
    else:
      out_of_tree_build = True

    if executable is None: executable = os.path.splitext(os.path.basename(tfmlfile))[0]

    # sort out any extra cmake options
    cmake_options = getExtraCmakeOptions(args)        

    print "***************************"
    print "Executable name =", executable
    print "Auxiliary files =", auxfiles
    print "Extra Cmake options =", cmake_options
    print "***************************"
    
    # make build_directory
    try:
        os.makedirs(build_dir)
    except OSError:
        pass

    # link auxiliary files in build_dir
    # FIXME: this needs to be sorted out to make sure names are consistent with tfml files (potentially use libspud to parse tfml?)
    # FIXME:  also should be careful about overwriting links particularly if build_dir = .
    for name in auxfiles:
      if (os.path.isfile(name)):
        try:
          os.symlink(os.path.abspath(name),os.path.join(build_dir, os.path.basename(name)))
        except OSError:
          pass # presumably file exists
      else:
        raise Exception("Auxiliary file, %s, not found"%(name))
    
    #run cmake or ccmake
    if interactive:
        cmake_prog = "ccmake"
    else:
        cmake_prog = "cmake"

    cmake_path = os.getenv('TF_CMAKE_PATH')
    if cmake_path is None: raise Exception("Could not find TF_CMAKE_PATH in environment.")

    # run twice as cmake seems to modify flags on second run
    for i in xrange(2):
      p = subprocess.Popen([cmake_prog,cmake_path,
                           "-DOPTIONSFILE="+tfmlfile,
                           "-DEXECUTABLE="+executable]+cmake_options, 
                           cwd=build_dir)   
      retcode = p.wait()
      if retcode != 0:
        raise Exception("%s returned error code %d in directory %s."%(cmake_prog, retcode, build_dir))




