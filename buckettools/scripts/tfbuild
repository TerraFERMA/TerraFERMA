#!/usr/bin/env python
#
#  utility script for building TerraFERMA models

import os
import sys
import subprocess
import shutil
from optparse import OptionParser


def chdir(dirname):
  try:
    os.chdir(dirname)
  except OSError:
    print "ERROR no such directory "+dirname+"."
    sys.exit(1)

def getExtraCmakeOptions(options):
    """
    get extra -D options for cmake from the command line or the environment variable BASEBUCKET_CMAKE_EXTRA_DARGS
    """
    # get options from command line
    cmake_options = options.extra_Doptions

    #convert to string if None
    if (cmake_options == None):
        cmake_options = ''
        
    # get options from environment variable
    env_options = os.getenv('BASEBUCKET_CMAKE_EXTRA_DARGS')
    if (env_options == None):
        env_options = ''

    cmake_options += env_options
    return cmake_options.split()
        
if __name__ == "__main__":
    """
    Configure an out of tree build for a TerraFERMA project
    """

    # set up the options parser
    usage = 'usage: %prog  bmlfile.bml [ -d build_directory ] -i [ -e executable_name]  [ -D "extra cmake args" ] [  "auxiliary files"]'
    parser = OptionParser(usage=usage)
    parser.add_option("-d","--build_dir",dest="build_dir",default="build", help="out of tree build directory")
    parser.add_option("-e","--executable_name",dest="executable", help="alternate name of executable, defaults to bmlname")
    parser.add_option("-D", dest="extra_Doptions",help="extra -D options for cmake")
    parser.add_option("-i", "--interactive", 
                      dest="interactive",action="store_true",default=False, 
                      help="use ccmake for interactive build <default is cmake>") 
    

    (options, args) = parser.parse_args()
    if len(args) == 0:
        print 'Error: must include bmlfile'
        parser.print_help()
        sys.exit()
    else:
        bmlfile = args[0]
        auxfiles = args[1:]

    # check for legal bml filename
    if (not bmlfile.endswith('.bml')):
        print 'Error:  invalid bmlfile name'
        parser.print_help()
        sys.exit()

        
    build_dir = options.build_dir    
    interactive = options.interactive
    executable = options.executable

    if (executable == None):
        executable = bmlfile.rstrip(".bml")

    # sort out any extra cmake options
    cmake_options = getExtraCmakeOptions(options)        

    print "***************************"
    print "Executable name =", executable
    print "Auxiliary files =", auxfiles
    print "Extra Cmake options =", cmake_options
    print "***************************"
    
    # make build_directory
    try:
        os.mkdir(build_dir)
    except OSError:
        pass

    # link auxiliary files in build_dir
    # FIXME: this needs to be sorted out to make sure names are consistent with bml files (potentially use libspud to parse bml?)
    # FIXME:  also should be careful about overwriting links
    for name in auxfiles:
        if (os.path.isfile(name)):
            subprocess.call(["ln","-sf",os.path.abspath(name),build_dir+"/"+os.path.basename(name)])
        else:
            print 'Error: auxiliary file', name,' not found'
            sys.exit(1)

    #run cmake or ccmake
    chdir(build_dir)
    if interactive:
        cmake_prog = "ccmake"
    else:
        cmake_prog = "cmake"

    try:
        cmake_path = os.getenv('BASEBUCKET_CMAKE_PATH')
        subprocess.check_call([cmake_prog,cmake_path,"-DOPTIONSFILE=../"+bmlfile,"-DEXECUTABLE="+executable]+cmake_options)   
    except:
        print "ERROR while calling cmake in directory ", build_dir
        os.chdir("../")
    sys.exit(1)
    os.chdir("../")
    





