#!/usr/bin/env python3

# Copyright (C) 2013 Columbia University in the City of New York and others.
#
# Please see the AUTHORS file in the main source directory for a full list
# of contributors.
#
# This file is part of TerraFERMA.
#
# TerraFERMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TerraFERMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with TerraFERMA. If not, see <http://www.gnu.org/licenses/>.

import meshio
import sys
import numpy as np
import os

def gmsh2xdmf(filename, outbasename=None):
  """
  Read a (assumed gmsh) file at the location of filename.  Output XDMF files compatible with TF.
  """
  basename, ext = os.path.splitext(filename)
  if ext != '.msh':
    raise Exception("ERROR: Unknown input extension: {}".format(ext,))

  if outbasename is not None:
    basename, ext = os.path.splitext(outbasename)
    if ext != '' and ext != '.xdmf':
      raise Exception("ERROR: Unknown output extension: {}".format(ext,))

  msh = meshio.read(filename)
  
  highest_dim = 1
  cell_type = "line"
  facet_type = "vertex"
  if "tetra" in msh.cells_dict:
    highest_dim = 3
    cell_type = "tetra"
    facet_type = "triangle"
  elif "triangle" in msh.cells_dict:
    highest_dim = 2
    cell_type = "triangle"
    facet_type = "line"
  
  # remove vertices not mentioned in cell_type cells
  orphaned_vertices = np.setdiff1d(np.arange(len(msh.points)), msh.cells_dict[cell_type].flatten())
  vertices = np.delete(msh.points, orphaned_vertices, axis=0)[:,:highest_dim]
  
  # then adjust any cells pointing at now misindexed vertices
  
  def fix_orphaned_points(cells, orphaned_vertices):
    cells_flat = cells.flatten()
    diff = np.zeros(len(cells_flat), dtype=cells_flat.dtype)
    for orphan in orphaned_vertices:
      diff[np.argwhere(cells_flat > orphan)] += 1
    cells_flat -= diff
    return cells_flat.reshape(cells.shape)
  
  cells = fix_orphaned_points(msh.cells_dict[cell_type], orphaned_vertices)
  
  meshio.write(basename+'.xdmf', meshio.Mesh(points=vertices, cells={cell_type:cells}))
  
  if 'gmsh:physical' in msh.cell_data_dict:
    if cell_type in msh.cell_data_dict['gmsh:physical']:
      cell_regions = msh.cell_data_dict['gmsh:physical'][cell_type]
      if len(cell_regions) > 0:
        meshio.write(basename+'_cell_ids.xdmf', meshio.Mesh(points=vertices, cells={cell_type:cells}, \
                                                            cell_data={'cell_ids':[cell_regions,]}))
    
    # for facets first find facets to retain
    if facet_type in msh.cell_data_dict['gmsh:physical']:
      facet_inds = [np.all(np.isin(facet, orphaned_vertices, assume_unique=True, invert=True)) for facet in msh.cells_dict[facet_type]]
      facet_regions = msh.cell_data_dict['gmsh:physical'][facet_type][facet_inds]
      if len(facet_regions) > 0:
        # then reindex the remaining facets
        facets = fix_orphaned_points(msh.cells_dict[facet_type][facet_inds], orphaned_vertices)
        meshio.write(basename+'_facet_ids.xdmf', meshio.Mesh(points=vertices, cells={facet_type:facets}, \
                                                             cell_data={'facet_ids':[facet_regions,]}))

if __name__ == "__main__":
  import argparse
  import os

  parser = argparse.ArgumentParser( \
                         description="""Convert from gmsh .msh to .xdmf.
                                        If gmsh physical cell or facet ids are present, separate xdmf files (basename_cell_ids.xdmf
                                        and basename_facet_ids.xdmf respectively) will be generated for
                                        them.""")
  parser.add_argument('filename', action='store', metavar='filename', type=str,
                      help='specify gmsh .msh filename')
  parser.add_argument('-o', '--output', action='store', metavar='filename', type=str, default=None, required=False,
                      help='output filename or basename (defaults to filename.xdmf)')
  args = parser.parse_args()

  gmsh2xdmf(args.filename, args.output)
