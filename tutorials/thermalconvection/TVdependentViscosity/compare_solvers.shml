<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>medium</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Workflow for running and comparing a range of solver strategies for the isoviscous thermal convection</string_value>
  </description>
  <simulations>
    <simulation name="newton_exact">
      <input_file>
        <string_value lines="1" type="filename">newton_exact/convection.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <number_processes>
        <integer_value rank="0">1</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">64</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

N = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells",[N,N])</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
        </parameter>
        <parameter name="Ra">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Convection/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Ra))</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
          <comment>Rayleigh Number</comment>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/system::Convection/nonlinear_solver::Solver/type::SNES/monitors/convergence_file")
elif conv_file == '1':
  libspud.set_option("/timestepping/finish_time",20.)</string_value>
            <comment>if conv_file = 1 just run for about 15 time steps</comment>
            <single_build/>
          </update>
          <comment>Boolean to turn on/off convergence file (keeping a convergence file will degrade performance) 
0 will turn off convergence file
1 will just run for a short time</comment>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="Nu_newton_exact">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Nu_newton_exact = stat["Convection"]["TemperatureNu"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="Vrms_newton_exact">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("rbconvection.stat")
Vrms_newton_exact = sqrt(stat["Convection"]["VelocityvrmsSquared"]["functional_value"][-1])</string_value>
          <comment>RMS velocity</comment>
        </variable>
        <variable name="Walltime_newton_exact">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Walltime_newton_exact = stat["ElapsedWallTime"]["value"]</string_value>
        </variable>
        <variable name="L2res_newton_exact">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residaul
  L2res_newton_exact = conv['Convection']['res_norm(l2)']
else:
  L2res_newton_exact = []</string_value>
        </variable>
        <variable name="timestep_newton_exact">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the time step
  timestep_newton_exact = conv['timestep']['value']
else:
  statfile = glob("*.stat")[0]
  stat = parser(statfile)
  timestep_newton_exact= stat['timestep']['value']</string_value>
        </variable>
      </variables>
    </simulation>
    <simulation name="newton_fieldsplit_direct">
      <input_file>
        <string_value lines="1" type="filename">newton_fieldsplit_direct/convection.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <number_processes>
        <integer_value rank="0">1</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">64</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

N = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells",[N,N])</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
        </parameter>
        <parameter name="Ra">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Convection/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Ra))</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
          <comment>Rayleigh Number</comment>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/system::Convection/nonlinear_solver::Solver/type::SNES/monitors/convergence_file")
elif conv_file == '1':
  libspud.set_option("/timestepping/finish_time",20.)</string_value>
            <comment>if conv_file = 1 just run for about 15 time steps</comment>
            <single_build/>
          </update>
          <comment>Boolean to turn on/off convergence file (keeping a convergence file will degrade performance) 
0 will turn off convergence file
1 will just run for a short time</comment>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="Nu_newton_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Nu_newton_fieldsplit_direct = stat["Convection"]["TemperatureNu"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="Vrms_newton_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("rbconvection.stat")
Vrms_newton_fieldsplit_direct = sqrt(stat["Convection"]["VelocityvrmsSquared"]["functional_value"][-1])</string_value>
          <comment>RMS velocity</comment>
        </variable>
        <variable name="Walltime_newton_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Walltime_newton_fieldsplit_direct = stat["ElapsedWallTime"]["value"]</string_value>
        </variable>
        <variable name="L2res_newton_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residaul
  L2res_newton_fieldsplit_direct = conv['Convection']['res_norm(l2)']
else:
  L2res_newton_fieldsplit_direct = []</string_value>
        </variable>
        <variable name="timestep_newton_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the time step
  timestep_newton_fieldsplit_direct = conv['timestep']['value']
else:
  statfile = glob("*.stat")[0]
  stat = parser(statfile)
  timestep_newton_fieldsplit_direct= stat['timestep']['value']</string_value>
        </variable>
      </variables>
    </simulation>
    <simulation name="preonly_fieldsplit_direct">
      <input_file>
        <string_value lines="1" type="filename">preonly_fieldsplit_direct/convection.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <number_processes>
        <integer_value rank="0">1</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">64</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

N = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells",[N,N])</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
        </parameter>
        <parameter name="Ra">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Convection/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Ra))</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
          <comment>Rayleigh Number</comment>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/system::Convection/nonlinear_solver::Solver/type::SNES/monitors/convergence_file")
elif conv_file == '1':
  libspud.set_option("/timestepping/finish_time",20.)</string_value>
            <comment>if conv_file = 1 just run for about 15 time steps</comment>
            <single_build/>
          </update>
          <comment>Boolean to turn on/off convergence file (keeping a convergence file will degrade performance) 
0 will turn off convergence file
1 will just run for a short time</comment>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="Nu_preonly_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Nu_preonly_fieldsplit_direct = stat["Convection"]["TemperatureNu"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="Vrms_preonly_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("rbconvection.stat")
Vrms_preonly_fieldsplit_direct = sqrt(stat["Convection"]["VelocityvrmsSquared"]["functional_value"][-1])</string_value>
          <comment>RMS velocity</comment>
        </variable>
        <variable name="Walltime_preonly_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Walltime_preonly_fieldsplit_direct = stat["ElapsedWallTime"]["value"]</string_value>
        </variable>
        <variable name="L2res_preonly_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residaul
  L2res_preonly_fieldsplit_direct = conv['Convection']['res_norm(l2)']
else:
  L2res_preonly_fieldsplit_direct = []</string_value>
        </variable>
        <variable name="timestep_preonly_fieldsplit_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the time step
  timestep_preonly_fieldsplit_direct = conv['timestep']['value']
else:
  statfile = glob("*.stat")[0]
  stat = parser(statfile)
  timestep_preonly_fieldsplit_direct= stat['timestep']['value']</string_value>
        </variable>
      </variables>
    </simulation>
    <simulation name="picard_splitting">
      <input_file>
        <string_value lines="1" type="filename">picard_splitting/convection.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <number_processes>
        <integer_value rank="0">1</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">64</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

N = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells",[N,N])</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
        </parameter>
        <parameter name="Ra">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Convection/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Ra))</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
          <comment>Rayleigh Number</comment>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/nonlinear_systems/monitors/convergence_file")
elif conv_file == '1':
  libspud.set_option("/timestepping/finish_time",20.)</string_value>
            <comment>if conv_file = 1 just run for about 15 time steps</comment>
            <single_build/>
          </update>
          <comment>Boolean to turn on/off convergence file (keeping a convergence file will degrade performance) 
0 will turn off convergence file
1 will just run for a short time</comment>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="Nu_picard_splitting">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Nu_picard_splitting = stat["Temperature"]["TemperatureNu"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="Vrms_picard_splitting">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("rbconvection.stat")
Vrms_picard_splitting = sqrt(stat["Convection"]["VelocityvrmsSquared"]["functional_value"][-1])</string_value>
          <comment>RMS velocity</comment>
        </variable>
        <variable name="Walltime_picard_splitting">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Walltime_picard_splitting = stat["ElapsedWallTime"]["value"]</string_value>
        </variable>
        <variable name="L2res_picard_splitting">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residaul
  L2res_picard_splitting = conv['NonlinearSystems']['res_norm(l2)']
else:
  L2res_picard_splitting = []</string_value>
        </variable>
        <variable name="timestep_picard_splitting">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the time step
  timestep_picard_splitting = conv['timestep']['value']
else:
  statfile = glob("*.stat")[0]
  stat = parser(statfile)
  timestep_picard_splitting= stat['timestep']['value']</string_value>
        </variable>
      </variables>
    </simulation>
    <simulation name="newton_fieldsplit_direct_lagged">
      <input_file>
        <string_value lines="1" type="filename">newton_fieldsplit_direct_Tv_laggedjacobian/convection.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <number_processes>
        <integer_value rank="0">1</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">64</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

N = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells",[N,N])</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
        </parameter>
        <parameter name="Ra">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Convection/coefficient::RayleighNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Ra))</string_value>
            <comment>change the number of cells in the rectangular mesh</comment>
            <single_build/>
          </update>
          <comment>Rayleigh Number</comment>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/system::Convection/nonlinear_solver::Solver/type::SNES/monitors/convergence_file")
elif conv_file == '1':
  libspud.set_option("/timestepping/finish_time",20.)</string_value>
            <comment>if conv_file = 1 just run for about 15 time steps</comment>
            <single_build/>
          </update>
          <comment>Boolean to turn on/off convergence file (keeping a convergence file will degrade performance) 
0 will turn off convergence file
1 will just run for a short time</comment>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="Nu_newton_fieldsplit_direct_lagged">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Nu_newton_fieldsplit_direct_lagged = stat["Convection"]["TemperatureNu"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="Vrms_newton_fieldsplit_direct_lagged">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("rbconvection.stat")
Vrms_newton_fieldsplit_direct_lagged = sqrt(stat["Convection"]["VelocityvrmsSquared"]["functional_value"][-1])</string_value>
          <comment>RMS velocity</comment>
        </variable>
        <variable name="Walltime_newton_fieldsplit_direct_lagged">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("rbconvection.stat")
Walltime_newton_fieldsplit_direct_lagged = stat["ElapsedWallTime"]["value"]</string_value>
        </variable>
        <variable name="L2res_newton_fieldsplit_direct_lagged">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residaul
  L2res_newton_fieldsplit_direct_lagged = conv['Convection']['res_norm(l2)']
else:
  L2res_newton_fieldsplit_direct_lagged = []</string_value>
        </variable>
        <variable name="timestep_newton_fieldsplit_direct_lagged">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the time step
  timestep_newton_fieldsplit_direct_lagged = conv['timestep']['value']
else:
  statfile = glob("*.stat")[0]
  stat = parser(statfile)
  timestep_newton_fieldsplit_direct_lagged= stat['timestep']['value']</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="Print">
      <string_value lines="20" type="code" language="python">solvers = ['newton_exact', 'newton_fieldsplit_direct', 'preonly_fieldsplit_direct','picard_splitting','newton_fieldsplit_direct_lagged']
variables = ['Nu','Vrms','Walltime','L2res','timestep']
for solver in solvers:
  for var in variables:
    print var+'_'+solver, eval(var+'_'+solver)</string_value>
    </test>
    <test name="PlotConvergence">
      <string_value lines="20" type="code" language="python">import matplotlib 
matplotlib.use('Agg')
import matplotlib.pyplot as pl
import numpy as np

solvers = ['newton_exact', 'newton_fieldsplit_direct', 'preonly_fieldsplit_direct','picard_splitting', 'newton_fieldsplit_direct_lagged']
colors = ['r','b','g','k']

pl.figure()
for i in range(len(solvers)): 
  solver = solvers[i]
  color = colors[i]
  ncells = eval("Nu_"+solver+".parameters['ncells']")
  Ra = eval("Nu_"+solver+".parameters['Ra']")
  slice = {'ncells':ncells,'Ra':Ra,'conv_file':'1'}
  # convert timesteps and residuals to a numpy array
  timesteps = np.array(eval("timestep_"+solver+"[slice]"))
  res = np.array(eval("L2res_"+solver+"[slice]"))  
  # find the indices for the last timestep
  index = (timesteps == timesteps[-1])
  iterations = range(len(res[index]))
  pl.semilogy(iterations,res[index],color+'-o',linewidth=2.0)
  pl.hold(True)   

pl.grid()
pl.xlabel('SNES iterations')
pl.ylabel('||r||_2')
pl.title('Non-linear Convergence for n={0}'.format(int(timesteps[-1])))
pl.legend(solvers,loc='best')
pl.savefig('Solver_comparison_SNES_convergence.pdf')


print "SNES Convergence plot in Solver_comparison_SNES_convergence.pdf"</string_value>
    </test>
    <test name="PlotTiming">
      <string_value lines="20" type="code" language="python">import matplotlib 
matplotlib.use('Agg')
import matplotlib.pyplot as pl
import numpy as np

solvers = ['newton_exact', 'newton_fieldsplit_direct', 'preonly_fieldsplit_direct','picard_splitting','newton_fieldsplit_direct_lagged']
colors = ['r','b','g','k']

pl.figure()
for i in range(len(solvers)): 
  solver = solvers[i]
  color = colors[i]
  ncells = eval("Nu_"+solver+".parameters['ncells']")
  Ra = eval("Nu_"+solver+".parameters['Ra']")
  slice = {'ncells':ncells,'Ra':Ra,'conv_file':'0'}
  # convert timesteps and walltime to a numpy array
  timesteps = np.array(eval("timestep_"+solver+"[slice]"))
  walltime = np.array(eval("Walltime_"+solver+"[slice]"))
  # extract maximum walltime for newton_exact to normalize by  
  if solver == 'newton_exact':
    walltime_norm = walltime[-1]
  # find the indices for the last timestep
  pl.plot(timesteps,walltime/walltime_norm,color+'-',linewidth=2.0)
  pl.hold(True)   

pl.grid()
pl.xlabel('Timesteps')
pl.ylabel('Walltime/{:.0f} (s)'.format(walltime_norm))
pl.title('Relative performance')
pl.legend(solvers,loc='best')
pl.savefig('Solver_comparison_Walltime.pdf')


print "Walltime plot in Solver_comparison_Walltime.pdf"</string_value>
    </test>
  </tests>
</harness_options>
