<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <tags>
    <string_value lines="1">testable</string_value>
  </tags>
  <description>
    <string_value lines="1">Test harness script to generate a gmsh mesh then run the stokes solve described in stokes.tfml</string_value>
  </description>
  <simulations>
    <simulation name="StokesGmsh">
      <input_file>
        <string_value lines="1" type="filename">stokes.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">mesh/widget.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <required_output>
            <filenames name="meshfiles">
              <string>
                <string_value lines="1" type="filename">widget.xml.gz</string_value>
              </string>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 -algo del2d widget.geo</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">dolfin-convert widget.msh widget.xml</string_value>
            </command>
            <command name="Compress">
              <string_value lines="1">gzip widget.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="vrms">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt

stat = parser("stokes.stat")
vrms = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])</string_value>
        </variable>
        <variable name="PressureIntegral">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("stokes.stat")
PressureIntegral = stat["Stokes"]["PressureIntegral"]["functional_value"][-1]</string_value>
        </variable>
        <variable name="L2NormPressure">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt

stat = parser("stokes.stat")
L2NormPressure = sqrt(stat["Stokes"]["PressureL2NormSquared"]["functional_value"][-1])</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="vrms">
      <string_value lines="20" type="code" language="python">value = 0.0432069895815
relerror = abs(vrms -value)/abs(value)
print "vrms =", vrms, "value =", value, "relative error =", relerror
assert (relerror &lt; 1.e-4)</string_value>
    </test>
    <test name="PressureIntegral">
      <string_value lines="20" type="code" language="python">value = 2.9692584777
relerror = abs(PressureIntegral -value)/abs(value)
print "PressureIntegral =", PressureIntegral, "value =", value, "relative error =", relerror
assert (relerror &lt; 1.e-4)</string_value>
    </test>
    <test name="L2NormPressure">
      <string_value lines="20" type="code" language="python">value = 3.16780418697
relerror = abs(L2NormPressure -value)/abs(value)
print "L2NormPressure =", L2NormPressure, "value =", value, "relative error =", relerror
assert (relerror &lt; 1.e-4)</string_value>
    </test>
  </tests>
</harness_options>
