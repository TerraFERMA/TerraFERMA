<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="Rectangle">
        <lower_left>
          <real_value shape="2" dim1="2" rank="1">-1. -1.</real_value>
        </lower_left>
        <upper_right>
          <real_value shape="2" dim1="2" rank="1">1. 1.</real_value>
        </upper_right>
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">32 32</integer_value>
        </number_cells>
        <diagonal>
          <string_value lines="1">right/left</string_value>
        </diagonal>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">stokes</string_value>
    </output_base_name>
    <dump_periods/>
    <detectors>
      <point name="Point">
        <real_value shape="2" dim1="dim" rank="1">0. 0.</real_value>
      </point>
      <point name="corner">
        <real_value shape="2" dim1="dim" rank="1">1. 1.</real_value>
      </point>
    </detectors>
  </io>
  <global_parameters/>
  <system name="Stokes">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us</string_value>
    </ufl_symbol>
    <field name="Velocity">
      <ufl_symbol name="global">
        <string_value lines="1">v</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant name="dim">
              <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
            </constant>
          </initial_condition>
          <boundary_condition name="all">
            <boundary_ids>
              <integer_value shape="4" rank="1">1 2 3 4</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type type="boundary_condition" name="Dirichlet">
                <python rank="1">
                  <string_value lines="20" type="code" language="python"># exact solution for velocity
def val(x):
  u = 20.*x[0]*x[1]**3
  v = 5.*(x[0]**4 - x[1]**4)
  return [u,v]</string_value>
                </python>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <field name="Pressure">
      <ufl_symbol name="global">
        <string_value lines="1">p</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
        <include_in_detectors/>
      </diagnostics>
    </field>
    <coefficient name="AnalyticVelocity">
      <ufl_symbol name="global">
        <string_value lines="1">ve</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="1">
              <string_value lines="20" type="code" language="python"># exact solution for velocity
def val(x):
  u = 20.*x[0]*x[1]**3
  v = 5.*(x[0]**4 - x[1]**4)
  return [u,v]</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="AnalyticPressure">
      <ufl_symbol name="global">
        <string_value lines="1">pe</string_value>
      </ufl_symbol>
      <type name="Expression">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <value type="value" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python"># exact solution for velocity
def val(x):
  p = 60.*x[0]**2*x[1] - 20.*x[1]**3
  return p</string_value>
            </python>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <coefficient name="src">
      <ufl_symbol name="global">
        <string_value lines="1">f</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Vector" rank="1">
          <value type="value" name="WholeMesh">
            <constant name="dim">
              <real_value shape="2" dim1="dim" rank="1">0. 0.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python"># scaled viscosity term
eta = 1.

Fv = (inner(sym(grad(v_t)), 2.*eta*sym(grad(v_i))) - div(v_t)*p_i - inner(v_t,f_i))*dx
Fp = -p_t*div(v_i)*dx

F = Fv + Fp</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">F</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">J = derivative(F, us_i, us_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <form name="JacobianPC" rank="1">
          <string_value lines="20" type="code" language="python"># Lazy approach -- just add viscosity weighted pressure mass matrix
#Jpc = derivative(F, us_i, us_a) + p_t*p_a/eta*dx

# Better way, don't include lower Triangular block

Jpcv = (inner(sym(grad(v_t)), 2.*eta*sym(grad(v_a))) - div(v_t)*p_a)*dx
Jpcp = -p_t*p_a/eta*dx

Jpc = Jpcv + Jpcp</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">Jpc</string_value>
          </ufl_symbol>
        </form>
        <quadrature_degree>
          <integer_value rank="0">3</integer_value>
        </quadrature_degree>
        <quadrature_rule name="default"/>
        <snes_type name="ksponly"/>
        <relative_error>
          <real_value rank="0">1.e-11</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-11</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <view_snes/>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="fgmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-15</real_value>
            </relative_error>
            <absolute_error>
              <real_value rank="0">1.e-7</real_value>
            </absolute_error>
            <max_iterations>
              <integer_value rank="0">50</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="fieldsplit">
            <composite_type name="multiplicative"/>
            <fieldsplit name="Pressure">
              <field name="Pressure"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="cg">
                  <relative_error>
                    <real_value rank="0">1.e-5</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">50</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors>
                    <preconditioned_residual/>
                  </monitors>
                </iterative_method>
                <preconditioner name="sor"/>
              </linear_solver>
            </fieldsplit>
            <fieldsplit name="Velocity">
              <field name="Velocity"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="fgmres">
                  <restart>
                    <integer_value rank="0">30</integer_value>
                  </restart>
                  <relative_error>
                    <real_value rank="0">1.e-3</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">1</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors>
                    <preconditioned_residual/>
                  </monitors>
                </iterative_method>
                <preconditioner name="fieldsplit">
                  <composite_type name="additive"/>
                  <fieldsplit name="Velocityx">
                    <field name="Velocity">
                      <components>
                        <integer_value shape="1" rank="1">0</integer_value>
                      </components>
                    </field>
                    <monitors/>
                    <linear_solver>
                      <iterative_method name="preonly"/>
                      <preconditioner name="hypre">
                        <hypre_type name="boomeramg"/>
                      </preconditioner>
                    </linear_solver>
                  </fieldsplit>
                  <fieldsplit name="Velocityy">
                    <field name="Velocity">
                      <components>
                        <integer_value shape="1" rank="1">1</integer_value>
                      </components>
                    </field>
                    <monitors/>
                    <linear_solver>
                      <iterative_method name="preonly"/>
                      <preconditioner name="hypre">
                        <hypre_type name="boomeramg"/>
                      </preconditioner>
                    </linear_solver>
                  </fieldsplit>
                </preconditioner>
              </linear_solver>
            </fieldsplit>
          </preconditioner>
          <remove_null_space>
            <null_space name="ConstantPressure">
              <field name="Pressure">
                <constant>
                  <real_value rank="0">1.0</real_value>
                </constant>
              </field>
              <monitors/>
            </null_space>
            <monitors/>
          </remove_null_space>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="at_start"/>
    </nonlinear_solver>
    <functional name="VelocityL2NormSquared">
      <string_value lines="20" type="code" language="python">int = inner(v,v)*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="VelocityL2NormErrorSquared">
      <string_value lines="20" type="code" language="python">errv = inner((v-ve),(v-ve))*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">errv</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="PressureIntegral">
      <string_value lines="20" type="code" language="python">int = p*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">int</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="PressureL2NormErrorSquared">
      <string_value lines="20" type="code" language="python">errp = (p-pe)**2*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">errp</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
    <functional name="PressureL2NormSquared">
      <string_value lines="20" type="code" language="python">intp2 = p*p*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">intp2</string_value>
      </ufl_symbol>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
  </system>
</terraferma_options>
