<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>medium</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Workflow for running and comparing a range of solver strategies for the stokes mms problem</string_value>
  </description>
  <simulations>
    <simulation name="stokes_direct">
      <input_file>
        <string_value lines="1" type="filename">mms_stokes_direct.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16 32 64 128 256</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
n = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells", [n, n])</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
            <comment>if conv_file = 0 then delete convergence file from monitor</comment>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/system::Stokes/nonlinear_solver::Solver/type::SNES/linear_solver/iterative_method[0]/monitors/convergence_file")</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="error_l2_V_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
# get ||V||_2 and ||error_V||_2
l2_norm_V = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])
error_l2_V_direct = sqrt(stat["Stokes"]["VelocityL2NormErrorSquared"]["functional_value"][-1])/l2_norm_V</string_value>
        </variable>
        <variable name="error_l2_P_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
# get ||P||_2 and ||error_P||_2
l2_norm_P = sqrt(stat["Stokes"]["PressureL2NormSquared"]["functional_value"][-1])
error_l2_P_direct = sqrt(stat["Stokes"]["PressureL2NormErrorSquared"]["functional_value"][-1])/l2_norm_P</string_value>
        </variable>
        <variable name="ksp_L2residual_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residaul
  ksp_L2residual_direct = conv['Stokes']['res_norm(l2)']
else:
  ksp_L2residual_direct = []</string_value>
        </variable>
        <variable name="NDofs_direct">
          <string_value lines="20" type="code" language="python"># this requires that the PYTHONPATH is correct by source ./environment
from getNdofs import getNdofs

NDofs_direct = max(getNdofs())</string_value>
        </variable>
        <variable name="petsc_time_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
petsc_time_direct = sum(LocalTimes.values())/numProcs</string_value>
        </variable>
        <variable name="SNES_Solve_time_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_Solve_time_direct =  sum([  Stages['Main Stage']['SNESSolve'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="SNES_FunctionEval_time_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_FunctionEval_time_direct =  sum([  Stages['Main Stage']['SNESFunctionEval'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="SNES_JacobianEval_time_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_JacobianEval_time_direct = sum([  Stages['Main Stage']['SNESJacobianEval'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="KSP_Solve_time_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
KSP_Solve_time_direct =   sum([  Stages['Main Stage']['KSPSolve'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="PC_Setup_time_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
PC_Setup_time_direct =  sum([  Stages['Main Stage']['PCSetUp'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
      </variables>
    </simulation>
    <simulation name="stokes_fs_direct">
      <input_file>
        <string_value lines="1" type="filename">mms_stokes_fs_direct.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16 32 64 128 256</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
n = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells", [n, n])</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
            <comment>if conv_file = 0 then delete convergence file from monitor</comment>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/system::Stokes/nonlinear_solver::Solver/type::SNES/linear_solver/iterative_method[0]/monitors/convergence_file")</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="error_l2_V_fs_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
# get ||V||_2 and ||error_V||_2
l2_norm_V = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])
error_l2_V_fs_direct = sqrt(stat["Stokes"]["VelocityL2NormErrorSquared"]["functional_value"][-1])/l2_norm_V</string_value>
        </variable>
        <variable name="error_l2_P_fs_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
# get ||P||_2 and ||error_P||_2
l2_norm_P = sqrt(stat["Stokes"]["PressureL2NormSquared"]["functional_value"][-1])
error_l2_P_fs_direct = sqrt(stat["Stokes"]["PressureL2NormErrorSquared"]["functional_value"][-1])/l2_norm_P</string_value>
        </variable>
        <variable name="ksp_L2residual_fs_direct">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residaul
  ksp_L2residual_fs_direct = conv['Stokes']['res_norm(l2)']
else:
  ksp_L2residual_fs_direct = []</string_value>
        </variable>
        <variable name="NDofs_fs_direct">
          <string_value lines="20" type="code" language="python"># this requires that the PYTHONPATH is correct by source ./environment
from getNdofs import getNdofs

NDofs_fs_direct = max(getNdofs())</string_value>
        </variable>
        <variable name="petsc_time_fs_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
petsc_time_fs_direct = sum(LocalTimes.values())/numProcs</string_value>
        </variable>
        <variable name="SNES_Solve_time_fs_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_Solve_time_fs_direct =  sum([  Stages['Main Stage']['SNESSolve'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="SNES_FunctionEval_time_fs_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_FunctionEval_time_fs_direct =  sum([  Stages['Main Stage']['SNESFunctionEval'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="SNES_JacobianEval_time_fs_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_JacobianEval_time_fs_direct = sum([  Stages['Main Stage']['SNESJacobianEval'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="KSP_Solve_time_fs_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
KSP_Solve_time_fs_direct =   sum([  Stages['Main Stage']['KSPSolve'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="PC_Setup_time_fs_direct">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
PC_Setup_time_fs_direct =  sum([  Stages['Main Stage']['PCSetUp'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
      </variables>
    </simulation>
    <simulation name="stokes_iterative">
      <input_file>
        <string_value lines="1" type="filename">mms_stokes_iterative.tfml</string_value>
      </input_file>
      <run_when name="input_changed"/>
      <parameter_sweep>
        <parameter name="ncells">
          <values>
            <string_value lines="1">16 32 64 128 256</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
n = int(ncells)
libspud.set_option("/geometry/mesh::Mesh/source::Rectangle/number_cells", [n, n])</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="conv_file">
          <values>
            <string_value lines="1">0 1</string_value>
            <comment>if conv_file = 0 then delete convergence file from monitor</comment>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if conv_file == '0':
  libspud.delete_option("/system::Stokes/nonlinear_solver::Solver/type::SNES/linear_solver/iterative_method[0]/monitors/convergence_file")</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="error_l2_V_iterative">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
# get ||V||_2 and ||error_V||_2
l2_norm_V = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][-1])
error_l2_V_iterative = sqrt(stat["Stokes"]["VelocityL2NormErrorSquared"]["functional_value"][-1])/l2_norm_V</string_value>
        </variable>
        <variable name="error_l2_P_iterative">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from math import sqrt
stat = parser("stokes.stat")
# get ||P||_2 and ||error_P||_2
l2_norm_P = sqrt(stat["Stokes"]["PressureL2NormSquared"]["functional_value"][-1])
error_l2_P_iterative = sqrt(stat["Stokes"]["PressureL2NormErrorSquared"]["functional_value"][-1])/l2_norm_P</string_value>
        </variable>
        <variable name="ksp_L2residual_iterative">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from glob import glob
convfile = glob("*.conv")
if convfile:
  conv = parser(convfile[0])
  # extract the system residual
  ksp_L2residual_iterative = conv['Stokes']['res_norm(l2)']
else:
  ksp_L2residual_iterative = []</string_value>
        </variable>
        <variable name="NDofs_iterative">
          <string_value lines="20" type="code" language="python">from getNdofs import getNdofs

NDofs_iterative = max(getNdofs())</string_value>
        </variable>
        <variable name="petsc_time_iterative">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
petsc_time_iterative = sum(LocalTimes.values())/numProcs</string_value>
        </variable>
        <variable name="SNES_Solve_time_iterative">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_Solve_time_iterative =  sum([  Stages['Main Stage']['SNESSolve'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="SNES_FunctionEval_time_iterative">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_FunctionEval_time_iterative =  sum([  Stages['Main Stage']['SNESFunctionEval'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="SNES_JacobianEval_time_iterative">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
SNES_JacobianEval_time_iterative = sum([  Stages['Main Stage']['SNESJacobianEval'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="KSP_Solve_time_iterative">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
KSP_Solve_time_iterative =   sum([  Stages['Main Stage']['KSPSolve'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
        <variable name="PC_Setup_time_iterative">
          <string_value lines="20" type="code" language="python">execfile('petsc_log.py')
PC_Setup_time_iterative =  sum([  Stages['Main Stage']['PCSetUp'][n]['time'] for n in range(numProcs) ])/numProcs</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="Error_l2_V">
      <string_value lines="20" type="code" language="python">print error_l2_V_direct
print error_l2_V_fs_direct
print error_l2_V_iterative</string_value>
    </test>
    <test name="Error_l2_p">
      <string_value lines="20" type="code" language="python">print error_l2_P_direct
print error_l2_P_fs_direct
print error_l2_P_iterative</string_value>
    </test>
    <test name="PlotErrors">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
# set a display independent backend
matplotlib.use('Agg')
import matplotlib.pyplot as pl

solvers = ['direct', 'fs_direct', 'iterative']
colors = ['r','b','g']
pl.figure()


for i in range(len(solvers)):
  solver = solvers[i]
  color = colors[i]
  ncells = eval("error_l2_V_"+solver+".parameters['ncells']")
  h = np.array([ 1./float(N) for N in ncells])
  #print solvers[i], ncells, h
  slice = "[{'ncells':ncells,'conv_file':'0'}]"
  V_err = eval("error_l2_V_"+solver+slice)
  P_err = eval("error_l2_P_"+solver+slice)
  #print solvers[i], V_err, P_err
  pv=np.polyfit(np.log(h),np.log(V_err),1)
  pp=np.polyfit(np.log(h),np.log(P_err),1)
  llabel = solvers[i]+' $p_V$={0:2.1f} $p_p$={1:2.1f}'.format(pv[0],pp[0])
  pl.loglog(h,V_err,color+'o-',label=llabel)
  pl.hold(True)   
  pl.loglog(h,P_err,color+'s-')

pl.grid()
pl.xlabel('h')
pl.ylabel('||e||_2')

pl.title('Solver Convergence')
pl.legend(loc='best',fontsize=12)
pl.savefig('Solver_comparison_convergence.pdf')

print "Convergence plot in Solver_comparison_convergence.pdf"</string_value>
    </test>
    <test name="PlotConvergence">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
# set a display independent backend
matplotlib.use('Agg')
import matplotlib.pyplot as pl

solvers = ['direct', 'fs_direct', 'iterative']
colors = ['r','b','g']
pl.figure()

# find the maximum size run common to all solvers (this is a little dodgy)
Nmax = []
for i in range(len(solvers)):
  solver = solvers[i]
  ncells = eval("error_l2_V_"+solver+".parameters['ncells']")
  Nmax.append(max([ int(N)  for N  in ncells])) 

#convert back to a string
NPlot = "{0}".format(min(Nmax))
print Nmax, NPlot
  
#print ksp_L2residual_fs_direct
#print ksp_L2residual_fs_direct[{'ncells':NPlot}]

for i in range(len(solvers)): 
  solver = solvers[i]
  color = colors[i]
  ncells = eval("error_l2_V_"+solver+".parameters['ncells']")
  h = np.array([ 1./float(N) for N in ncells])
  #print solvers[i], ncells, h
  slice = "[{'ncells':NPlot,'conv_file':'1'}]"
  L2res = eval("ksp_L2residual_"+solver+slice)
  kits = range(len(L2res))
#  print kits, L2res
  pl.semilogy(kits,L2res,color+'+-')
  pl.hold(True)   

pl.grid()
pl.xlabel('KSP iterations')
pl.ylabel('||r||_2')
pl.title('KSP Convergence for N={0}'.format(NPlot))
pl.legend(solvers,loc='best')
pl.savefig('Solver_Comparison_ksp_convergence.pdf')


print "KSP Convergence plot in Solver_comparison_ksp_convergence.pdf"</string_value>
    </test>
    <test name="PlotTiming">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
# set a display independent backend
matplotlib.use('Agg')
import matplotlib.pyplot as pl

solvers = ['direct', 'fs_direct', 'iterative']
colors = ['r','b','g']

pl.figure()
legend = []    
for i in range(len(solvers)):
  solver = solvers[i]
  ncells = eval("error_l2_V_"+solver+".parameters['ncells']")
  N = np.array([ int(N) for N in ncells])
  slice = "[{'ncells':ncells,'conv_file':'0'}]"
  NDofs = np.array(eval("NDofs_"+solver+slice))
  
  # collect timings per dof
  total_time = np.array(eval("petsc_time_"+solver+slice))/NDofs
  SNES_FunctionEval_time = np.array(eval("SNES_FunctionEval_time_"+solver+slice))/NDofs
  SNES_JacobianEval_time = np.array(eval("SNES_JacobianEval_time_"+solver+slice))/NDofs
  SNES_Solve_time = np.array(eval("SNES_Solve_time_"+solver+slice))/NDofs
  KSP_Solve_time = np.array(eval("KSP_Solve_time_"+solver+slice))/NDofs
  PC_Setup_time = np.array(eval("PC_Setup_time_"+solver+slice))/NDofs
  assembly_time = SNES_JacobianEval_time + SNES_FunctionEval_time
  solve_time = KSP_Solve_time
  
  # and print some junk out
  print solver, "total_time=",total_time
  print solver, "assembly_time", assembly_time
  print solver, "solve_time", solve_time
  print solver, "PC_setup_time", PC_Setup_time
  
  # and plot the buggers out
  legend.append(solver+' KSP solve')
  legend.append(solver+' assemble')
  #legend.append(solver+' SNES_solve')
  color = colors[i]
  pl.semilogx(N,solve_time,color+'-o',N,assembly_time,colors[i]+'s-')
  pl.hold(True)
        
pl.xlabel('N')
pl.ylabel('time/dof (s)')
pl.ticklabel_format(style='sci',axis='y',scilimits=(0,0))
pl.grid()
pl.title('Timings per dof')
pl.legend(legend,loc='best',fontsize=10)
pl.savefig('Solver_Comparison_normalized_solver_timing.pdf')


print "Timing plot in Solver_comparison_normalized_solver_timing.pdf"</string_value>
    </test>
  </tests>
</harness_options>
